
HMI_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  000031b2  00003246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800118  00800118  000032fe  2**0
                  ALLOC
  3 .stab         00003054  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b3  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007607  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b198  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 56 13 	call	0x26ac	; 0x26ac <main>
      8a:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e0       	ldi	r26, 0x03	; 3
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 87 18 	jmp	0x310e	; 0x310e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MC1_enterPassword>:
/*
 * Description: Function to take the password input from the user.
 * Inputs: uint8 status  "PASSWORD or CONFIRM_PASSWORD" to display the correct commands
 * Returns: none
 */
void MC1_enterPassword(uint8 status){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a2 97       	sbiw	r28, 0x22	; 34
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a a3       	std	Y+34, r24	; 0x22

	uint8 i=0;
     b5c:	19 a2       	std	Y+33, r1	; 0x21

	LCD_clearScreen();
     b5e:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>
	LCD_displayString("Plz enter pass:");
     b6a:	80 e6       	ldi	r24, 0x60	; 96
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
	if(status == PASSWORD){
     b72:	8a a1       	ldd	r24, Y+34	; 0x22
     b74:	88 23       	and	r24, r24
     b76:	09 f0       	breq	.+2      	; 0xb7a <MC1_enterPassword+0x34>
     b78:	92 c0       	rjmp	.+292    	; 0xc9e <MC1_enterPassword+0x158>

		uint8 Key_Pressed;

		/*Move a cursor of LCD to second Row to Print Password Entered by user */
		LCD_moveCursor(1, 0);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>

		/* Take Pressed key from user until */
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
     b82:	1f 8e       	std	Y+31, r1	; 0x1f
     b84:	83 c0       	rjmp	.+262    	; 0xc8c <MC1_enterPassword+0x146>
		{
			/* Get Key_Pressed by user */
			Key_Pressed = KEYPAD_getPressedKey();
     b86:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <KEYPAD_getPressedKey>
     b8a:	88 a3       	std	Y+32, r24	; 0x20

			/* Store Password */
			Pass[i] = Key_Pressed;
     b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	fc 01       	movw	r30, r24
     b94:	e2 5e       	subi	r30, 0xE2	; 226
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	88 a1       	ldd	r24, Y+32	; 0x20
     b9a:	80 83       	st	Z, r24

			/* Display on LCD Encrypted PAssword (*) */
			LCD_displayCharacter('*');
     b9c:	8a e2       	ldi	r24, 0x2A	; 42
     b9e:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_displayCharacter>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	a8 e4       	ldi	r26, 0x48	; 72
     ba8:	b3 e4       	ldi	r27, 0x43	; 67
     baa:	89 8f       	std	Y+25, r24	; 0x19
     bac:	9a 8f       	std	Y+26, r25	; 0x1a
     bae:	ab 8f       	std	Y+27, r26	; 0x1b
     bb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb2:	69 8d       	ldd	r22, Y+25	; 0x19
     bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	4a ef       	ldi	r20, 0xFA	; 250
     bc0:	54 e4       	ldi	r21, 0x44	; 68
     bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	8d 8b       	std	Y+21, r24	; 0x15
     bcc:	9e 8b       	std	Y+22, r25	; 0x16
     bce:	af 8b       	std	Y+23, r26	; 0x17
     bd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bd2:	6d 89       	ldd	r22, Y+21	; 0x15
     bd4:	7e 89       	ldd	r23, Y+22	; 0x16
     bd6:	8f 89       	ldd	r24, Y+23	; 0x17
     bd8:	98 8d       	ldd	r25, Y+24	; 0x18
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be6:	88 23       	and	r24, r24
     be8:	2c f4       	brge	.+10     	; 0xbf4 <MC1_enterPassword+0xae>
		__ticks = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	9c 8b       	std	Y+20, r25	; 0x14
     bf0:	8b 8b       	std	Y+19, r24	; 0x13
     bf2:	3f c0       	rjmp	.+126    	; 0xc72 <MC1_enterPassword+0x12c>
	else if (__tmp > 65535)
     bf4:	6d 89       	ldd	r22, Y+21	; 0x15
     bf6:	7e 89       	ldd	r23, Y+22	; 0x16
     bf8:	8f 89       	ldd	r24, Y+23	; 0x17
     bfa:	98 8d       	ldd	r25, Y+24	; 0x18
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f e7       	ldi	r20, 0x7F	; 127
     c02:	57 e4       	ldi	r21, 0x47	; 71
     c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c08:	18 16       	cp	r1, r24
     c0a:	4c f5       	brge	.+82     	; 0xc5e <MC1_enterPassword+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0c:	69 8d       	ldd	r22, Y+25	; 0x19
     c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e2       	ldi	r20, 0x20	; 32
     c1a:	51 e4       	ldi	r21, 0x41	; 65
     c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9c 8b       	std	Y+20, r25	; 0x14
     c32:	8b 8b       	std	Y+19, r24	; 0x13
     c34:	0f c0       	rjmp	.+30     	; 0xc54 <MC1_enterPassword+0x10e>
     c36:	88 ec       	ldi	r24, 0xC8	; 200
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9a 8b       	std	Y+18, r25	; 0x12
     c3c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3e:	89 89       	ldd	r24, Y+17	; 0x11
     c40:	9a 89       	ldd	r25, Y+18	; 0x12
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <MC1_enterPassword+0xfc>
     c46:	9a 8b       	std	Y+18, r25	; 0x12
     c48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4a:	8b 89       	ldd	r24, Y+19	; 0x13
     c4c:	9c 89       	ldd	r25, Y+20	; 0x14
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c54:	8b 89       	ldd	r24, Y+19	; 0x13
     c56:	9c 89       	ldd	r25, Y+20	; 0x14
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	69 f7       	brne	.-38     	; 0xc36 <MC1_enterPassword+0xf0>
     c5c:	14 c0       	rjmp	.+40     	; 0xc86 <MC1_enterPassword+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5e:	6d 89       	ldd	r22, Y+21	; 0x15
     c60:	7e 89       	ldd	r23, Y+22	; 0x16
     c62:	8f 89       	ldd	r24, Y+23	; 0x17
     c64:	98 8d       	ldd	r25, Y+24	; 0x18
     c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	9c 8b       	std	Y+20, r25	; 0x14
     c70:	8b 8b       	std	Y+19, r24	; 0x13
     c72:	8b 89       	ldd	r24, Y+19	; 0x13
     c74:	9c 89       	ldd	r25, Y+20	; 0x14
     c76:	98 8b       	std	Y+16, r25	; 0x10
     c78:	8f 87       	std	Y+15, r24	; 0x0f
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	98 89       	ldd	r25, Y+16	; 0x10
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <MC1_enterPassword+0x138>
     c82:	98 8b       	std	Y+16, r25	; 0x10
     c84:	8f 87       	std	Y+15, r24	; 0x0f

		/*Move a cursor of LCD to second Row to Print Password Entered by user */
		LCD_moveCursor(1, 0);

		/* Take Pressed key from user until */
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
     c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	8f 8f       	std	Y+31, r24	; 0x1f
     c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c8e:	85 30       	cpi	r24, 0x05	; 5
     c90:	08 f4       	brcc	.+2      	; 0xc94 <MC1_enterPassword+0x14e>
     c92:	79 cf       	rjmp	.-270    	; 0xb86 <MC1_enterPassword+0x40>

			_delay_ms(200);
		}

		/* Don't Exit From this Fucntion Until user entered Enter Key */
		while(KEYPAD_getPressedKey() != ENTER_KEY){}
     c94:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <KEYPAD_getPressedKey>
     c98:	8d 30       	cpi	r24, 0x0D	; 13
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <MC1_enterPassword+0x14e>
     c9c:	9f c0       	rjmp	.+318    	; 0xddc <MC1_enterPassword+0x296>
	}
	else if(status == CONFIRM_PASSWORD){
     c9e:	8a a1       	ldd	r24, Y+34	; 0x22
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	09 f0       	breq	.+2      	; 0xca6 <MC1_enterPassword+0x160>
     ca4:	9b c0       	rjmp	.+310    	; 0xddc <MC1_enterPassword+0x296>

		uint8 Key_Pressed;
		LCD_clearScreen();
     ca6:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>
		LCD_displayString("Plz reenter pass:");
     cb2:	80 e7       	ldi	r24, 0x70	; 112
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
		/*Move a cursor of LCD to second Row to Print Password Entered by user */
		LCD_moveCursor(1, 0);
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>

		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
     cc2:	1d 8e       	std	Y+29, r1	; 0x1d
     cc4:	83 c0       	rjmp	.+262    	; 0xdcc <MC1_enterPassword+0x286>
		{
			/* Get Key_Pressed by user */
			Key_Pressed = KEYPAD_getPressedKey();
     cc6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <KEYPAD_getPressedKey>
     cca:	8e 8f       	std	Y+30, r24	; 0x1e
			//_delay_ms(500);

			/* Store Password */
			confimedPass[i] = Key_Pressed;
     ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	fc 01       	movw	r30, r24
     cd4:	ed 5d       	subi	r30, 0xDD	; 221
     cd6:	fe 4f       	sbci	r31, 0xFE	; 254
     cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cda:	80 83       	st	Z, r24

			/* Display on LCD Encrypted PAssword (*) */
			LCD_displayCharacter('*');
     cdc:	8a e2       	ldi	r24, 0x2A	; 42
     cde:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_displayCharacter>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a8 e4       	ldi	r26, 0x48	; 72
     ce8:	b3 e4       	ldi	r27, 0x43	; 67
     cea:	8b 87       	std	Y+11, r24	; 0x0b
     cec:	9c 87       	std	Y+12, r25	; 0x0c
     cee:	ad 87       	std	Y+13, r26	; 0x0d
     cf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a ef       	ldi	r20, 0xFA	; 250
     d00:	54 e4       	ldi	r21, 0x44	; 68
     d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8f 83       	std	Y+7, r24	; 0x07
     d0c:	98 87       	std	Y+8, r25	; 0x08
     d0e:	a9 87       	std	Y+9, r26	; 0x09
     d10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d12:	6f 81       	ldd	r22, Y+7	; 0x07
     d14:	78 85       	ldd	r23, Y+8	; 0x08
     d16:	89 85       	ldd	r24, Y+9	; 0x09
     d18:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <MC1_enterPassword+0x1ee>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <MC1_enterPassword+0x26c>
	else if (__tmp > 65535)
     d34:	6f 81       	ldd	r22, Y+7	; 0x07
     d36:	78 85       	ldd	r23, Y+8	; 0x08
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <MC1_enterPassword+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	8d 83       	std	Y+5, r24	; 0x05
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <MC1_enterPassword+0x24e>
     d76:	88 ec       	ldi	r24, 0xC8	; 200
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9c 83       	std	Y+4, r25	; 0x04
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <MC1_enterPassword+0x23c>
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	9e 81       	ldd	r25, Y+6	; 0x06
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <MC1_enterPassword+0x230>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <MC1_enterPassword+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6f 81       	ldd	r22, Y+7	; 0x07
     da0:	78 85       	ldd	r23, Y+8	; 0x08
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <MC1_enterPassword+0x278>
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0, 0);
		LCD_displayString("Plz reenter pass:");
		/*Move a cursor of LCD to second Row to Print Password Entered by user */
		LCD_moveCursor(1, 0);

		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
     dc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	8d 8f       	std	Y+29, r24	; 0x1d
     dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <MC1_enterPassword+0x28e>
     dd2:	79 cf       	rjmp	.-270    	; 0xcc6 <MC1_enterPassword+0x180>

			_delay_ms(200);
		}

		/* Don't Exit From this Fucntion Until user entered Enter Key */
		while(KEYPAD_getPressedKey() != ENTER_KEY){}
     dd4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <KEYPAD_getPressedKey>
     dd8:	8d 30       	cpi	r24, 0x0D	; 13
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <MC1_enterPassword+0x28e>

	}

}
     ddc:	a2 96       	adiw	r28, 0x22	; 34
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <MC1_createPassword>:
 * Description: Function to create the password and send to MC2 to check if the two passwords match.
 * Inputs: uint8* password, uint8* confirmed_password  "PASSWORD or CONFIRMED_PASSWORD"
 *		   that are saved in arrays
 * Returns: none
 */
void MC1_createPassword(){
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	ac 97       	sbiw	r28, 0x2c	; 44
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61

	uint8 mismatch = TRUE;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	8c a7       	std	Y+44, r24	; 0x2c

	do{
		MC1_enterPassword(PASSWORD); /*Enter the pass 1st time and save it in Pass[PASSWORD_SIZE] */
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_enterPassword>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	aa ef       	ldi	r26, 0xFA	; 250
     e12:	b3 e4       	ldi	r27, 0x43	; 67
     e14:	8f a3       	std	Y+39, r24	; 0x27
     e16:	98 a7       	std	Y+40, r25	; 0x28
     e18:	a9 a7       	std	Y+41, r26	; 0x29
     e1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1c:	6f a1       	ldd	r22, Y+39	; 0x27
     e1e:	78 a5       	ldd	r23, Y+40	; 0x28
     e20:	89 a5       	ldd	r24, Y+41	; 0x29
     e22:	9a a5       	ldd	r25, Y+42	; 0x2a
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	4a ef       	ldi	r20, 0xFA	; 250
     e2a:	54 e4       	ldi	r21, 0x44	; 68
     e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	8b a3       	std	Y+35, r24	; 0x23
     e36:	9c a3       	std	Y+36, r25	; 0x24
     e38:	ad a3       	std	Y+37, r26	; 0x25
     e3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e3c:	6b a1       	ldd	r22, Y+35	; 0x23
     e3e:	7c a1       	ldd	r23, Y+36	; 0x24
     e40:	8d a1       	ldd	r24, Y+37	; 0x25
     e42:	9e a1       	ldd	r25, Y+38	; 0x26
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e8       	ldi	r20, 0x80	; 128
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e50:	88 23       	and	r24, r24
     e52:	2c f4       	brge	.+10     	; 0xe5e <MC1_createPassword+0x70>
		__ticks = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	9a a3       	std	Y+34, r25	; 0x22
     e5a:	89 a3       	std	Y+33, r24	; 0x21
     e5c:	3f c0       	rjmp	.+126    	; 0xedc <MC1_createPassword+0xee>
	else if (__tmp > 65535)
     e5e:	6b a1       	ldd	r22, Y+35	; 0x23
     e60:	7c a1       	ldd	r23, Y+36	; 0x24
     e62:	8d a1       	ldd	r24, Y+37	; 0x25
     e64:	9e a1       	ldd	r25, Y+38	; 0x26
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e72:	18 16       	cp	r1, r24
     e74:	4c f5       	brge	.+82     	; 0xec8 <MC1_createPassword+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e76:	6f a1       	ldd	r22, Y+39	; 0x27
     e78:	78 a5       	ldd	r23, Y+40	; 0x28
     e7a:	89 a5       	ldd	r24, Y+41	; 0x29
     e7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9a a3       	std	Y+34, r25	; 0x22
     e9c:	89 a3       	std	Y+33, r24	; 0x21
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <MC1_createPassword+0xd0>
     ea0:	88 ec       	ldi	r24, 0xC8	; 200
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	98 a3       	std	Y+32, r25	; 0x20
     ea6:	8f 8f       	std	Y+31, r24	; 0x1f
     ea8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eaa:	98 a1       	ldd	r25, Y+32	; 0x20
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <MC1_createPassword+0xbe>
     eb0:	98 a3       	std	Y+32, r25	; 0x20
     eb2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	89 a1       	ldd	r24, Y+33	; 0x21
     eb6:	9a a1       	ldd	r25, Y+34	; 0x22
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	9a a3       	std	Y+34, r25	; 0x22
     ebc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebe:	89 a1       	ldd	r24, Y+33	; 0x21
     ec0:	9a a1       	ldd	r25, Y+34	; 0x22
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	69 f7       	brne	.-38     	; 0xea0 <MC1_createPassword+0xb2>
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <MC1_createPassword+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec8:	6b a1       	ldd	r22, Y+35	; 0x23
     eca:	7c a1       	ldd	r23, Y+36	; 0x24
     ecc:	8d a1       	ldd	r24, Y+37	; 0x25
     ece:	9e a1       	ldd	r25, Y+38	; 0x26
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	9a a3       	std	Y+34, r25	; 0x22
     eda:	89 a3       	std	Y+33, r24	; 0x21
     edc:	89 a1       	ldd	r24, Y+33	; 0x21
     ede:	9a a1       	ldd	r25, Y+34	; 0x22
     ee0:	9e 8f       	std	Y+30, r25	; 0x1e
     ee2:	8d 8f       	std	Y+29, r24	; 0x1d
     ee4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <MC1_createPassword+0xfa>
     eec:	9e 8f       	std	Y+30, r25	; 0x1e
     eee:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		MC1_enterPassword(CONFIRM_PASSWORD); /*Enter the pass 2nd time and save it in confimedPass[PASSWORD_SIZE] */
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_enterPassword>
		/****SENDING THE 1st PASS TO MC2****/

		UART_sendByte(RECEIVE_PASS); /*check that the MC2 is ready to receive password*/
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>

		while(UART_recieveByte() != SEND_PASS);  /*wait till MC2 is ready to Receive pass if not stay in the loop*/
     efc:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
     f00:	84 31       	cpi	r24, 0x14	; 20
     f02:	e1 f7       	brne	.-8      	; 0xefc <MC1_createPassword+0x10e>

		MC1_sendPassword(Pass); /*Send the 1st password to MC2*/
     f04:	8e e1       	ldi	r24, 0x1E	; 30
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 9f 08 	call	0x113e	; 0x113e <MC1_sendPassword>

		/****SENDING THE 2nd PASS TO MC2****/

		UART_sendByte(RECEIVE_PASS); /*check that the MC2 is ready to receive password*/
     f0c:	8a e0       	ldi	r24, 0x0A	; 10
     f0e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>

		while(UART_recieveByte() != SEND_PASS);  /*wait till MC2 is ready to Receive pass if not stay in the loop*/
     f12:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
     f16:	84 31       	cpi	r24, 0x14	; 20
     f18:	e1 f7       	brne	.-8      	; 0xf12 <MC1_createPassword+0x124>

		MC1_sendPassword(confimedPass); /*Send the 2nd password to MC2*/
     f1a:	83 e2       	ldi	r24, 0x23	; 35
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 9f 08 	call	0x113e	; 0x113e <MC1_sendPassword>

		uint8 i;
		i=UART_recieveByte();
     f22:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
     f26:	8b a7       	std	Y+43, r24	; 0x2b

		if(i == MISMATCH){
     f28:	8b a5       	ldd	r24, Y+43	; 0x2b
     f2a:	88 23       	and	r24, r24
     f2c:	09 f0       	breq	.+2      	; 0xf30 <MC1_createPassword+0x142>
     f2e:	7b c0       	rjmp	.+246    	; 0x1026 <MC1_createPassword+0x238>
			mismatch = TRUE;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	8c a7       	std	Y+44, r24	; 0x2c
			LCD_clearScreen();
     f34:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
			LCD_displayString("ERROR MISMATCH");
     f38:	82 e8       	ldi	r24, 0x82	; 130
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	aa e7       	ldi	r26, 0x7A	; 122
     f46:	b4 e4       	ldi	r27, 0x44	; 68
     f48:	89 8f       	std	Y+25, r24	; 0x19
     f4a:	9a 8f       	std	Y+26, r25	; 0x1a
     f4c:	ab 8f       	std	Y+27, r26	; 0x1b
     f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f50:	69 8d       	ldd	r22, Y+25	; 0x19
     f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	4a ef       	ldi	r20, 0xFA	; 250
     f5e:	54 e4       	ldi	r21, 0x44	; 68
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8d 8b       	std	Y+21, r24	; 0x15
     f6a:	9e 8b       	std	Y+22, r25	; 0x16
     f6c:	af 8b       	std	Y+23, r26	; 0x17
     f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f70:	6d 89       	ldd	r22, Y+21	; 0x15
     f72:	7e 89       	ldd	r23, Y+22	; 0x16
     f74:	8f 89       	ldd	r24, Y+23	; 0x17
     f76:	98 8d       	ldd	r25, Y+24	; 0x18
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	2c f4       	brge	.+10     	; 0xf92 <MC1_createPassword+0x1a4>
		__ticks = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
     f90:	3f c0       	rjmp	.+126    	; 0x1010 <MC1_createPassword+0x222>
	else if (__tmp > 65535)
     f92:	6d 89       	ldd	r22, Y+21	; 0x15
     f94:	7e 89       	ldd	r23, Y+22	; 0x16
     f96:	8f 89       	ldd	r24, Y+23	; 0x17
     f98:	98 8d       	ldd	r25, Y+24	; 0x18
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	4c f5       	brge	.+82     	; 0xffc <MC1_createPassword+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	69 8d       	ldd	r22, Y+25	; 0x19
     fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9c 8b       	std	Y+20, r25	; 0x14
     fd0:	8b 8b       	std	Y+19, r24	; 0x13
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <MC1_createPassword+0x204>
     fd4:	88 ec       	ldi	r24, 0xC8	; 200
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9a 8b       	std	Y+18, r25	; 0x12
     fda:	89 8b       	std	Y+17, r24	; 0x11
     fdc:	89 89       	ldd	r24, Y+17	; 0x11
     fde:	9a 89       	ldd	r25, Y+18	; 0x12
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <MC1_createPassword+0x1f2>
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	8b 89       	ldd	r24, Y+19	; 0x13
     fea:	9c 89       	ldd	r25, Y+20	; 0x14
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	9c 8b       	std	Y+20, r25	; 0x14
     ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff2:	8b 89       	ldd	r24, Y+19	; 0x13
     ff4:	9c 89       	ldd	r25, Y+20	; 0x14
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	69 f7       	brne	.-38     	; 0xfd4 <MC1_createPassword+0x1e6>
     ffa:	92 c0       	rjmp	.+292    	; 0x1120 <MC1_createPassword+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffc:	6d 89       	ldd	r22, Y+21	; 0x15
     ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    1000:	8f 89       	ldd	r24, Y+23	; 0x17
    1002:	98 8d       	ldd	r25, Y+24	; 0x18
    1004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	98 8b       	std	Y+16, r25	; 0x10
    1016:	8f 87       	std	Y+15, r24	; 0x0f
    1018:	8f 85       	ldd	r24, Y+15	; 0x0f
    101a:	98 89       	ldd	r25, Y+16	; 0x10
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <MC1_createPassword+0x22e>
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	7d c0       	rjmp	.+250    	; 0x1120 <MC1_createPassword+0x332>
			_delay_ms(1000);
		}
		else if(i == MATCH){
    1026:	8b a5       	ldd	r24, Y+43	; 0x2b
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	09 f0       	breq	.+2      	; 0x102e <MC1_createPassword+0x240>
    102c:	79 c0       	rjmp	.+242    	; 0x1120 <MC1_createPassword+0x332>
			mismatch = FALSE;
    102e:	1c a6       	std	Y+44, r1	; 0x2c
			LCD_clearScreen();
    1030:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
			LCD_displayString("DONE PASS SAVED");
    1034:	81 e9       	ldi	r24, 0x91	; 145
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	aa e7       	ldi	r26, 0x7A	; 122
    1042:	b4 e4       	ldi	r27, 0x44	; 68
    1044:	8b 87       	std	Y+11, r24	; 0x0b
    1046:	9c 87       	std	Y+12, r25	; 0x0c
    1048:	ad 87       	std	Y+13, r26	; 0x0d
    104a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a ef       	ldi	r20, 0xFA	; 250
    105a:	54 e4       	ldi	r21, 0x44	; 68
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8f 83       	std	Y+7, r24	; 0x07
    1066:	98 87       	std	Y+8, r25	; 0x08
    1068:	a9 87       	std	Y+9, r26	; 0x09
    106a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106c:	6f 81       	ldd	r22, Y+7	; 0x07
    106e:	78 85       	ldd	r23, Y+8	; 0x08
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1080:	88 23       	and	r24, r24
    1082:	2c f4       	brge	.+10     	; 0x108e <MC1_createPassword+0x2a0>
		__ticks = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	3f c0       	rjmp	.+126    	; 0x110c <MC1_createPassword+0x31e>
	else if (__tmp > 65535)
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	4c f5       	brge	.+82     	; 0x10f8 <MC1_createPassword+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <MC1_createPassword+0x300>
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <MC1_createPassword+0x2ee>
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <MC1_createPassword+0x2e2>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <MC1_createPassword+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <MC1_createPassword+0x32a>
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

		}
		LCD_clearScreen();
    1120:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
	}while(mismatch);
    1124:	8c a5       	ldd	r24, Y+44	; 0x2c
    1126:	88 23       	and	r24, r24
    1128:	09 f0       	breq	.+2      	; 0x112c <MC1_createPassword+0x33e>
    112a:	6d ce       	rjmp	.-806    	; 0xe06 <MC1_createPassword+0x18>

	/****PASSWORDS MATCHING****/  /****STORE PASSWORDS IN MC2 MODULE****/


}
    112c:	ac 96       	adiw	r28, 0x2c	; 44
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <MC1_sendPassword>:
/*
 * Description: Function to send the password the user inputs using uart to MC2.
 * Inputs: uint8* password
 * Returns: none
 */
void MC1_sendPassword(uint8* password){
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	61 97       	sbiw	r28, 0x11	; 17
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	99 8b       	std	Y+17, r25	; 0x11
    1154:	88 8b       	std	Y+16, r24	; 0x10

	uint8 i;
	for(i=0; i<PASSWORD_SIZE ;i++){
    1156:	1f 86       	std	Y+15, r1	; 0x0f
    1158:	80 c0       	rjmp	.+256    	; 0x125a <MC1_sendPassword+0x11c>
		UART_sendByte(password[i]);  /*send the character i to MC2 using UART*/
    115a:	8f 85       	ldd	r24, Y+15	; 0x0f
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	88 89       	ldd	r24, Y+16	; 0x10
    1162:	99 89       	ldd	r25, Y+17	; 0x11
    1164:	fc 01       	movw	r30, r24
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	80 81       	ld	r24, Z
    116c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a8 e4       	ldi	r26, 0x48	; 72
    1176:	b2 e4       	ldi	r27, 0x42	; 66
    1178:	8b 87       	std	Y+11, r24	; 0x0b
    117a:	9c 87       	std	Y+12, r25	; 0x0c
    117c:	ad 87       	std	Y+13, r26	; 0x0d
    117e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1180:	6b 85       	ldd	r22, Y+11	; 0x0b
    1182:	7c 85       	ldd	r23, Y+12	; 0x0c
    1184:	8d 85       	ldd	r24, Y+13	; 0x0d
    1186:	9e 85       	ldd	r25, Y+14	; 0x0e
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	4a ef       	ldi	r20, 0xFA	; 250
    118e:	54 e4       	ldi	r21, 0x44	; 68
    1190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8f 83       	std	Y+7, r24	; 0x07
    119a:	98 87       	std	Y+8, r25	; 0x08
    119c:	a9 87       	std	Y+9, r26	; 0x09
    119e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a0:	6f 81       	ldd	r22, Y+7	; 0x07
    11a2:	78 85       	ldd	r23, Y+8	; 0x08
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <MC1_sendPassword+0x84>
		__ticks = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	9e 83       	std	Y+6, r25	; 0x06
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	3f c0       	rjmp	.+126    	; 0x1240 <MC1_sendPassword+0x102>
	else if (__tmp > 65535)
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	3f ef       	ldi	r19, 0xFF	; 255
    11ce:	4f e7       	ldi	r20, 0x7F	; 127
    11d0:	57 e4       	ldi	r21, 0x47	; 71
    11d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	4c f5       	brge	.+82     	; 0x122c <MC1_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11da:	6b 85       	ldd	r22, Y+11	; 0x0b
    11dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11de:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	0f c0       	rjmp	.+30     	; 0x1222 <MC1_sendPassword+0xe4>
    1204:	88 ec       	ldi	r24, 0xC8	; 200
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <MC1_sendPassword+0xd2>
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	69 f7       	brne	.-38     	; 0x1204 <MC1_sendPassword+0xc6>
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <MC1_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <MC1_sendPassword+0x10e>
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
 * Returns: none
 */
void MC1_sendPassword(uint8* password){

	uint8 i;
	for(i=0; i<PASSWORD_SIZE ;i++){
    1254:	8f 85       	ldd	r24, Y+15	; 0x0f
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8f 87       	std	Y+15, r24	; 0x0f
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	85 30       	cpi	r24, 0x05	; 5
    125e:	08 f4       	brcc	.+2      	; 0x1262 <MC1_sendPassword+0x124>
    1260:	7c cf       	rjmp	.-264    	; 0x115a <MC1_sendPassword+0x1c>
		UART_sendByte(password[i]);  /*send the character i to MC2 using UART*/
		_delay_ms(50);
	}

}
    1262:	61 96       	adiw	r28, 0x11	; 17
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <MC1_displayMainmenu>:
/*
 * Description: Function to display Main Menu options.
 * Inputs: none
 * Returns: none
 */
void MC1_displayMainmenu(void){
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();  /*clear lcd*/
    127c:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>
	LCD_displayString("+ : Open Door");  /*operation 1*/
    1288:	81 ea       	ldi	r24, 0xA1	; 161
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
	LCD_moveCursor(1, 0);
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>
	LCD_displayString("- : Change Pass");  /*operation 2*/
    1298:	8f ea       	ldi	r24, 0xAF	; 175
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>


}
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <MC1_incrementCounter>:
/*
 * Description:This is the call back function called by the Timer driver.
 * Inputs: none
 * Returns: none
 */
void MC1_incrementCounter(void){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    12ae:	80 91 18 01 	lds	r24, 0x0118
    12b2:	90 91 19 01 	lds	r25, 0x0119
    12b6:	a0 91 1a 01 	lds	r26, 0x011A
    12ba:	b0 91 1b 01 	lds	r27, 0x011B
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	a1 1d       	adc	r26, r1
    12c2:	b1 1d       	adc	r27, r1
    12c4:	80 93 18 01 	sts	0x0118, r24
    12c8:	90 93 19 01 	sts	0x0119, r25
    12cc:	a0 93 1a 01 	sts	0x011A, r26
    12d0:	b0 93 1b 01 	sts	0x011B, r27
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <MC1_warningMessage>:
/*
 * Description: Function to display an Error Message when the user enter wrong password certain number of times
 * Inputs: none
 * Returns: none
 */
void MC1_warningMessage(void){
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62

	g_ticks=0; /*reset the ticks to count 1 min from the start*/
    12e2:	10 92 18 01 	sts	0x0118, r1
    12e6:	10 92 19 01 	sts	0x0119, r1
    12ea:	10 92 1a 01 	sts	0x011A, r1
    12ee:	10 92 1b 01 	sts	0x011B, r1

	LCD_clearScreen();
    12f2:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>

	/*Display an Error message for 1 min*/
	LCD_displayString("ERROR Wrong Pass");
    12f6:	8f eb       	ldi	r24, 0xBF	; 191
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
	while(g_ticks < 60){
    12fe:	80 91 18 01 	lds	r24, 0x0118
    1302:	90 91 19 01 	lds	r25, 0x0119
    1306:	a0 91 1a 01 	lds	r26, 0x011A
    130a:	b0 91 1b 01 	lds	r27, 0x011B
    130e:	8c 33       	cpi	r24, 0x3C	; 60
    1310:	91 05       	cpc	r25, r1
    1312:	a1 05       	cpc	r26, r1
    1314:	b1 05       	cpc	r27, r1
    1316:	98 f3       	brcs	.-26     	; 0x12fe <MC1_warningMessage+0x24>
	}


}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <MC1_displayDoorOperation>:
/*
 * Description: Function to display Door operations "LOCKING, UNLOCKING, LOCKED".
 * Inputs: none
 * Returns: none
 */
void MC1_displayDoorOperation(void){
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62

	/**Door Opens**/
	g_ticks = 0;  /*reset the ticks to count 15 sec from the start*/
    1326:	10 92 18 01 	sts	0x0118, r1
    132a:	10 92 19 01 	sts	0x0119, r1
    132e:	10 92 1a 01 	sts	0x011A, r1
    1332:	10 92 1b 01 	sts	0x011B, r1
	LCD_clearScreen();  /*clear lcd*/
    1336:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
	LCD_displayString("Door Unlocking");  /*display the message for 15 sec*/
    133a:	80 ed       	ldi	r24, 0xD0	; 208
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
	while(g_ticks < DOOR_OPEN_TIME){
    1342:	80 91 18 01 	lds	r24, 0x0118
    1346:	90 91 19 01 	lds	r25, 0x0119
    134a:	a0 91 1a 01 	lds	r26, 0x011A
    134e:	b0 91 1b 01 	lds	r27, 0x011B
    1352:	8f 30       	cpi	r24, 0x0F	; 15
    1354:	91 05       	cpc	r25, r1
    1356:	a1 05       	cpc	r26, r1
    1358:	b1 05       	cpc	r27, r1
    135a:	98 f3       	brcs	.-26     	; 0x1342 <MC1_displayDoorOperation+0x24>
	}


	/**Door Held**/
	g_ticks = 0; /*reset the ticks to count 3 sec from the start*/
    135c:	10 92 18 01 	sts	0x0118, r1
    1360:	10 92 19 01 	sts	0x0119, r1
    1364:	10 92 1a 01 	sts	0x011A, r1
    1368:	10 92 1b 01 	sts	0x011B, r1
	LCD_clearScreen(); /*clear lcd*/
    136c:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
	LCD_displayString("Unlocked");  /*display the message for 15 sec*/
    1370:	8f ed       	ldi	r24, 0xDF	; 223
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
	while(g_ticks < DOOR_HOLD_TIME){
    1378:	80 91 18 01 	lds	r24, 0x0118
    137c:	90 91 19 01 	lds	r25, 0x0119
    1380:	a0 91 1a 01 	lds	r26, 0x011A
    1384:	b0 91 1b 01 	lds	r27, 0x011B
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	a1 05       	cpc	r26, r1
    138e:	b1 05       	cpc	r27, r1
    1390:	98 f3       	brcs	.-26     	; 0x1378 <MC1_displayDoorOperation+0x5a>
	}
	LCD_clearScreen(); /*clear lcd*/
    1392:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>


	/**Door Closes**/
	g_ticks = 0;  /*reset the ticks to count 15 sec from the start*/
    1396:	10 92 18 01 	sts	0x0118, r1
    139a:	10 92 19 01 	sts	0x0119, r1
    139e:	10 92 1a 01 	sts	0x011A, r1
    13a2:	10 92 1b 01 	sts	0x011B, r1
	LCD_clearScreen(); /*clear lcd*/
    13a6:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
	LCD_displayString("Door Locking");  /*display the message for 15 sec*/
    13aa:	88 ee       	ldi	r24, 0xE8	; 232
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>

	while(g_ticks < DOOR_CLOSE_TIME){
    13b2:	80 91 18 01 	lds	r24, 0x0118
    13b6:	90 91 19 01 	lds	r25, 0x0119
    13ba:	a0 91 1a 01 	lds	r26, 0x011A
    13be:	b0 91 1b 01 	lds	r27, 0x011B
    13c2:	8f 30       	cpi	r24, 0x0F	; 15
    13c4:	91 05       	cpc	r25, r1
    13c6:	a1 05       	cpc	r26, r1
    13c8:	b1 05       	cpc	r27, r1
    13ca:	98 f3       	brcs	.-26     	; 0x13b2 <MC1_displayDoorOperation+0x94>
	}
	LCD_clearScreen(); /*clear lcd for the next display*/
    13cc:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>

}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_setupPinDirection+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <GPIO_setupPinDirection+0x8>
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	6a 83       	std	Y+2, r22	; 0x02
    13e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	88 30       	cpi	r24, 0x08	; 8
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <GPIO_setupPinDirection+0x1c>
    13f0:	d5 c0       	rjmp	.+426    	; 0x159c <GPIO_setupPinDirection+0x1c6>
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	84 30       	cpi	r24, 0x04	; 4
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <GPIO_setupPinDirection+0x24>
    13f8:	d1 c0       	rjmp	.+418    	; 0x159c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3d 83       	std	Y+5, r19	; 0x05
    1402:	2c 83       	std	Y+4, r18	; 0x04
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <GPIO_setupPinDirection+0x3a>
    140e:	43 c0       	rjmp	.+134    	; 0x1496 <GPIO_setupPinDirection+0xc0>
    1410:	2c 81       	ldd	r18, Y+4	; 0x04
    1412:	3d 81       	ldd	r19, Y+5	; 0x05
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	2c f4       	brge	.+10     	; 0x1424 <GPIO_setupPinDirection+0x4e>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	71 f0       	breq	.+28     	; 0x143e <GPIO_setupPinDirection+0x68>
    1422:	bc c0       	rjmp	.+376    	; 0x159c <GPIO_setupPinDirection+0x1c6>
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	3d 81       	ldd	r19, Y+5	; 0x05
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <GPIO_setupPinDirection+0x5a>
    142e:	5f c0       	rjmp	.+190    	; 0x14ee <GPIO_setupPinDirection+0x118>
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <GPIO_setupPinDirection+0x66>
    143a:	85 c0       	rjmp	.+266    	; 0x1546 <GPIO_setupPinDirection+0x170>
    143c:	af c0       	rjmp	.+350    	; 0x159c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	a1 f4       	brne	.+40     	; 0x146c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1444:	aa e3       	ldi	r26, 0x3A	; 58
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ea e3       	ldi	r30, 0x3A	; 58
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_setupPinDirection+0x8c>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_setupPinDirection+0x88>
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	98 c0       	rjmp	.+304    	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    146c:	aa e3       	ldi	r26, 0x3A	; 58
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ea e3       	ldi	r30, 0x3A	; 58
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_setupPinDirection+0xb4>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_setupPinDirection+0xb0>
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	83 c0       	rjmp	.+262    	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	a1 f4       	brne	.+40     	; 0x14c4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    149c:	a7 e3       	ldi	r26, 0x37	; 55
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e7 e3       	ldi	r30, 0x37	; 55
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_setupPinDirection+0xe4>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_setupPinDirection+0xe0>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	6c c0       	rjmp	.+216    	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14c4:	a7 e3       	ldi	r26, 0x37	; 55
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e7 e3       	ldi	r30, 0x37	; 55
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_setupPinDirection+0x10c>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_setupPinDirection+0x108>
    14e6:	80 95       	com	r24
    14e8:	84 23       	and	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	57 c0       	rjmp	.+174    	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	a1 f4       	brne	.+40     	; 0x151c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14f4:	a4 e3       	ldi	r26, 0x34	; 52
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e3       	ldi	r30, 0x34	; 52
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <GPIO_setupPinDirection+0x13c>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <GPIO_setupPinDirection+0x138>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	40 c0       	rjmp	.+128    	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    151c:	a4 e3       	ldi	r26, 0x34	; 52
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e3       	ldi	r30, 0x34	; 52
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <GPIO_setupPinDirection+0x164>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <GPIO_setupPinDirection+0x160>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	2b c0       	rjmp	.+86     	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	a1 f4       	brne	.+40     	; 0x1574 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    154c:	a1 e3       	ldi	r26, 0x31	; 49
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e1 e3       	ldi	r30, 0x31	; 49
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_setupPinDirection+0x194>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_setupPinDirection+0x190>
    156e:	84 2b       	or	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	14 c0       	rjmp	.+40     	; 0x159c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1574:	a1 e3       	ldi	r26, 0x31	; 49
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e1 e3       	ldi	r30, 0x31	; 49
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_setupPinDirection+0x1bc>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_setupPinDirection+0x1b8>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_writePin+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_writePin+0x8>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
    15be:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	08 f0       	brcs	.+2      	; 0x15c8 <GPIO_writePin+0x1c>
    15c6:	d5 c0       	rjmp	.+426    	; 0x1772 <GPIO_writePin+0x1c6>
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	84 30       	cpi	r24, 0x04	; 4
    15cc:	08 f0       	brcs	.+2      	; 0x15d0 <GPIO_writePin+0x24>
    15ce:	d1 c0       	rjmp	.+418    	; 0x1772 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3d 83       	std	Y+5, r19	; 0x05
    15d8:	2c 83       	std	Y+4, r18	; 0x04
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <GPIO_writePin+0x3a>
    15e4:	43 c0       	rjmp	.+134    	; 0x166c <GPIO_writePin+0xc0>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <GPIO_writePin+0x4e>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	71 f0       	breq	.+28     	; 0x1614 <GPIO_writePin+0x68>
    15f8:	bc c0       	rjmp	.+376    	; 0x1772 <GPIO_writePin+0x1c6>
    15fa:	2c 81       	ldd	r18, Y+4	; 0x04
    15fc:	3d 81       	ldd	r19, Y+5	; 0x05
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <GPIO_writePin+0x5a>
    1604:	5f c0       	rjmp	.+190    	; 0x16c4 <GPIO_writePin+0x118>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <GPIO_writePin+0x66>
    1610:	85 c0       	rjmp	.+266    	; 0x171c <GPIO_writePin+0x170>
    1612:	af c0       	rjmp	.+350    	; 0x1772 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	a1 f4       	brne	.+40     	; 0x1642 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    161a:	ab e3       	ldi	r26, 0x3B	; 59
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	eb e3       	ldi	r30, 0x3B	; 59
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_writePin+0x8c>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_writePin+0x88>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	98 c0       	rjmp	.+304    	; 0x1772 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1642:	ab e3       	ldi	r26, 0x3B	; 59
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_writePin+0xb4>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_writePin+0xb0>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	83 c0       	rjmp	.+262    	; 0x1772 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	a1 f4       	brne	.+40     	; 0x169a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_writePin+0xe4>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_writePin+0xe0>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	6c c0       	rjmp	.+216    	; 0x1772 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    169a:	a8 e3       	ldi	r26, 0x38	; 56
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_writePin+0x10c>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_writePin+0x108>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	57 c0       	rjmp	.+174    	; 0x1772 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	a1 f4       	brne	.+40     	; 0x16f2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16ca:	a5 e3       	ldi	r26, 0x35	; 53
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e3       	ldi	r30, 0x35	; 53
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_writePin+0x13c>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_writePin+0x138>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	40 c0       	rjmp	.+128    	; 0x1772 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16f2:	a5 e3       	ldi	r26, 0x35	; 53
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e3       	ldi	r30, 0x35	; 53
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_writePin+0x164>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_writePin+0x160>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	2b c0       	rjmp	.+86     	; 0x1772 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	a1 f4       	brne	.+40     	; 0x174a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1722:	a2 e3       	ldi	r26, 0x32	; 50
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e2 e3       	ldi	r30, 0x32	; 50
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_writePin+0x194>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_writePin+0x190>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    174a:	a2 e3       	ldi	r26, 0x32	; 50
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_writePin+0x1bc>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_writePin+0x1b8>
    176c:	80 95       	com	r24
    176e:	84 23       	and	r24, r20
    1770:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <GPIO_readPin+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <GPIO_readPin+0x8>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1794:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 30       	cpi	r24, 0x08	; 8
    179a:	08 f0       	brcs	.+2      	; 0x179e <GPIO_readPin+0x1c>
    179c:	84 c0       	rjmp	.+264    	; 0x18a6 <GPIO_readPin+0x124>
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <GPIO_readPin+0x24>
    17a4:	80 c0       	rjmp	.+256    	; 0x18a6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3d 83       	std	Y+5, r19	; 0x05
    17ae:	2c 83       	std	Y+4, r18	; 0x04
    17b0:	4c 81       	ldd	r20, Y+4	; 0x04
    17b2:	5d 81       	ldd	r21, Y+5	; 0x05
    17b4:	41 30       	cpi	r20, 0x01	; 1
    17b6:	51 05       	cpc	r21, r1
    17b8:	79 f1       	breq	.+94     	; 0x1818 <GPIO_readPin+0x96>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	82 30       	cpi	r24, 0x02	; 2
    17c0:	91 05       	cpc	r25, r1
    17c2:	34 f4       	brge	.+12     	; 0x17d0 <GPIO_readPin+0x4e>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	21 15       	cp	r18, r1
    17ca:	31 05       	cpc	r19, r1
    17cc:	69 f0       	breq	.+26     	; 0x17e8 <GPIO_readPin+0x66>
    17ce:	6b c0       	rjmp	.+214    	; 0x18a6 <GPIO_readPin+0x124>
    17d0:	4c 81       	ldd	r20, Y+4	; 0x04
    17d2:	5d 81       	ldd	r21, Y+5	; 0x05
    17d4:	42 30       	cpi	r20, 0x02	; 2
    17d6:	51 05       	cpc	r21, r1
    17d8:	b9 f1       	breq	.+110    	; 0x1848 <GPIO_readPin+0xc6>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <GPIO_readPin+0x64>
    17e4:	49 c0       	rjmp	.+146    	; 0x1878 <GPIO_readPin+0xf6>
    17e6:	5f c0       	rjmp	.+190    	; 0x18a6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17e8:	e9 e3       	ldi	r30, 0x39	; 57
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 2f       	mov	r24, r24
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_readPin+0x7e>
    17fc:	55 95       	asr	r21
    17fe:	47 95       	ror	r20
    1800:	8a 95       	dec	r24
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_readPin+0x7a>
    1804:	ca 01       	movw	r24, r20
    1806:	81 70       	andi	r24, 0x01	; 1
    1808:	90 70       	andi	r25, 0x00	; 0
    180a:	88 23       	and	r24, r24
    180c:	19 f0       	breq	.+6      	; 0x1814 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	49 c0       	rjmp	.+146    	; 0x18a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1814:	19 82       	std	Y+1, r1	; 0x01
    1816:	47 c0       	rjmp	.+142    	; 0x18a6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1818:	e6 e3       	ldi	r30, 0x36	; 54
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a9 01       	movw	r20, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <GPIO_readPin+0xae>
    182c:	55 95       	asr	r21
    182e:	47 95       	ror	r20
    1830:	8a 95       	dec	r24
    1832:	e2 f7       	brpl	.-8      	; 0x182c <GPIO_readPin+0xaa>
    1834:	ca 01       	movw	r24, r20
    1836:	81 70       	andi	r24, 0x01	; 1
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	88 23       	and	r24, r24
    183c:	19 f0       	breq	.+6      	; 0x1844 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	31 c0       	rjmp	.+98     	; 0x18a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1844:	19 82       	std	Y+1, r1	; 0x01
    1846:	2f c0       	rjmp	.+94     	; 0x18a6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1848:	e3 e3       	ldi	r30, 0x33	; 51
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a9 01       	movw	r20, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <GPIO_readPin+0xde>
    185c:	55 95       	asr	r21
    185e:	47 95       	ror	r20
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <GPIO_readPin+0xda>
    1864:	ca 01       	movw	r24, r20
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	90 70       	andi	r25, 0x00	; 0
    186a:	88 23       	and	r24, r24
    186c:	19 f0       	breq	.+6      	; 0x1874 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	19 c0       	rjmp	.+50     	; 0x18a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1874:	19 82       	std	Y+1, r1	; 0x01
    1876:	17 c0       	rjmp	.+46     	; 0x18a6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1878:	e0 e3       	ldi	r30, 0x30	; 48
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <GPIO_readPin+0x10e>
    188c:	55 95       	asr	r21
    188e:	47 95       	ror	r20
    1890:	8a 95       	dec	r24
    1892:	e2 f7       	brpl	.-8      	; 0x188c <GPIO_readPin+0x10a>
    1894:	ca 01       	movw	r24, r20
    1896:	81 70       	andi	r24, 0x01	; 1
    1898:	90 70       	andi	r25, 0x00	; 0
    189a:	88 23       	and	r24, r24
    189c:	19 f0       	breq	.+6      	; 0x18a4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18a4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <GPIO_setupPortDirection+0x6>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <GPIO_setupPortDirection+0x8>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	90 f5       	brcc	.+100    	; 0x1932 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	3c 83       	std	Y+4, r19	; 0x04
    18d6:	2b 83       	std	Y+3, r18	; 0x03
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	d1 f0       	breq	.+52     	; 0x1916 <GPIO_setupPortDirection+0x5e>
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	3c 81       	ldd	r19, Y+4	; 0x04
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <GPIO_setupPortDirection+0x3e>
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	61 f0       	breq	.+24     	; 0x190c <GPIO_setupPortDirection+0x54>
    18f4:	1e c0       	rjmp	.+60     	; 0x1932 <GPIO_setupPortDirection+0x7a>
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	81 f0       	breq	.+32     	; 0x1920 <GPIO_setupPortDirection+0x68>
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	83 30       	cpi	r24, 0x03	; 3
    1906:	91 05       	cpc	r25, r1
    1908:	81 f0       	breq	.+32     	; 0x192a <GPIO_setupPortDirection+0x72>
    190a:	13 c0       	rjmp	.+38     	; 0x1932 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    190c:	ea e3       	ldi	r30, 0x3A	; 58
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1916:	e7 e3       	ldi	r30, 0x37	; 55
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	80 83       	st	Z, r24
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1920:	e4 e3       	ldi	r30, 0x34	; 52
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	80 83       	st	Z, r24
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    192a:	e1 e3       	ldi	r30, 0x31	; 49
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	80 83       	st	Z, r24
			break;
		}
	}
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <GPIO_writePort+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <GPIO_writePort+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	90 f5       	brcc	.+100    	; 0x19ba <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3c 83       	std	Y+4, r19	; 0x04
    195e:	2b 83       	std	Y+3, r18	; 0x03
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	d1 f0       	breq	.+52     	; 0x199e <GPIO_writePort+0x5e>
    196a:	2b 81       	ldd	r18, Y+3	; 0x03
    196c:	3c 81       	ldd	r19, Y+4	; 0x04
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	2c f4       	brge	.+10     	; 0x197e <GPIO_writePort+0x3e>
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	61 f0       	breq	.+24     	; 0x1994 <GPIO_writePort+0x54>
    197c:	1e c0       	rjmp	.+60     	; 0x19ba <GPIO_writePort+0x7a>
    197e:	2b 81       	ldd	r18, Y+3	; 0x03
    1980:	3c 81       	ldd	r19, Y+4	; 0x04
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	81 f0       	breq	.+32     	; 0x19a8 <GPIO_writePort+0x68>
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	91 05       	cpc	r25, r1
    1990:	81 f0       	breq	.+32     	; 0x19b2 <GPIO_writePort+0x72>
    1992:	13 c0       	rjmp	.+38     	; 0x19ba <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1994:	eb e3       	ldi	r30, 0x3B	; 59
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
    199c:	0e c0       	rjmp	.+28     	; 0x19ba <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    199e:	e8 e3       	ldi	r30, 0x38	; 56
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 83       	st	Z, r24
    19a6:	09 c0       	rjmp	.+18     	; 0x19ba <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    19a8:	e5 e3       	ldi	r30, 0x35	; 53
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	80 83       	st	Z, r24
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <GPIO_readPort+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <GPIO_readPort+0x8>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19d6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	90 f5       	brcc	.+100    	; 0x1a42 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3c 83       	std	Y+4, r19	; 0x04
    19e6:	2b 83       	std	Y+3, r18	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	91 05       	cpc	r25, r1
    19f0:	d1 f0       	breq	.+52     	; 0x1a26 <GPIO_readPort+0x5e>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <GPIO_readPort+0x3e>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <GPIO_readPort+0x54>
    1a04:	1e c0       	rjmp	.+60     	; 0x1a42 <GPIO_readPort+0x7a>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	81 f0       	breq	.+32     	; 0x1a30 <GPIO_readPort+0x68>
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	91 05       	cpc	r25, r1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <GPIO_readPort+0x72>
    1a1a:	13 c0       	rjmp	.+38     	; 0x1a42 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a1c:	e9 e3       	ldi	r30, 0x39	; 57
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	0e c0       	rjmp	.+28     	; 0x1a42 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a26:	e6 e3       	ldi	r30, 0x36	; 54
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a30:	e3 e3       	ldi	r30, 0x33	; 51
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a3a:	e0 e3       	ldi	r30, 0x30	; 48
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <KEYPAD_getPressedKey+0x6>
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a60:	1b 82       	std	Y+3, r1	; 0x03
    1a62:	43 c0       	rjmp	.+134    	; 0x1aea <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	98 2f       	mov	r25, r24
    1a70:	9c 5f       	subi	r25, 0xFC	; 252
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	69 2f       	mov	r22, r25
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9c 01       	movw	r18, r24
    1a84:	2c 5f       	subi	r18, 0xFC	; 252
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <KEYPAD_getPressedKey+0x40>
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	2a 95       	dec	r18
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <KEYPAD_getPressedKey+0x3c>
    1a96:	80 95       	com	r24
    1a98:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1aa2:	1a 82       	std	Y+2, r1	; 0x02
    1aa4:	1c c0       	rjmp	.+56     	; 0x1ade <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	6a 81       	ldd	r22, Y+2	; 0x02
    1aaa:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_readPin>
    1aae:	88 23       	and	r24, r24
    1ab0:	99 f4       	brne	.+38     	; 0x1ad8 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	89 0f       	add	r24, r25
    1ac6:	8f 5f       	subi	r24, 0xFF	; 255
    1ac8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	8f 5f       	subi	r24, 0xFF	; 255
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	08 f3       	brcs	.-62     	; 0x1aa6 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	08 f4       	brcc	.+2      	; 0x1af2 <KEYPAD_getPressedKey+0xa0>
    1af0:	b9 cf       	rjmp	.-142    	; 0x1a64 <KEYPAD_getPressedKey+0x12>
    1af2:	b6 cf       	rjmp	.-148    	; 0x1a60 <KEYPAD_getPressedKey+0xe>

00001af4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <KEYPAD_4x4_adjustKeyNumber+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <KEYPAD_4x4_adjustKeyNumber+0x8>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b02:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3c 83       	std	Y+4, r19	; 0x04
    1b0c:	2b 83       	std	Y+3, r18	; 0x03
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	88 30       	cpi	r24, 0x08	; 8
    1b14:	91 05       	cpc	r25, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b18:	70 c0       	rjmp	.+224    	; 0x1bfa <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1e:	29 30       	cpi	r18, 0x09	; 9
    1b20:	31 05       	cpc	r19, r1
    1b22:	5c f5       	brge	.+86     	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	84 30       	cpi	r24, 0x04	; 4
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b2e:	59 c0       	rjmp	.+178    	; 0x1be2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b30:	2b 81       	ldd	r18, Y+3	; 0x03
    1b32:	3c 81       	ldd	r19, Y+4	; 0x04
    1b34:	25 30       	cpi	r18, 0x05	; 5
    1b36:	31 05       	cpc	r19, r1
    1b38:	9c f4       	brge	.+38     	; 0x1b60 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	91 05       	cpc	r25, r1
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b44:	48 c0       	rjmp	.+144    	; 0x1bd6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	23 30       	cpi	r18, 0x03	; 3
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b50:	45 c0       	rjmp	.+138    	; 0x1bdc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	91 05       	cpc	r25, r1
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b5c:	39 c0       	rjmp	.+114    	; 0x1bd0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b5e:	67 c0       	rjmp	.+206    	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b60:	2b 81       	ldd	r18, Y+3	; 0x03
    1b62:	3c 81       	ldd	r19, Y+4	; 0x04
    1b64:	26 30       	cpi	r18, 0x06	; 6
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b6a:	41 c0       	rjmp	.+130    	; 0x1bee <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	87 30       	cpi	r24, 0x07	; 7
    1b72:	91 05       	cpc	r25, r1
    1b74:	0c f0       	brlt	.+2      	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b76:	3e c0       	rjmp	.+124    	; 0x1bf4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b78:	37 c0       	rjmp	.+110    	; 0x1be8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7e:	2c 30       	cpi	r18, 0x0C	; 12
    1b80:	31 05       	cpc	r19, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b84:	46 c0       	rjmp	.+140    	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	8d 30       	cpi	r24, 0x0D	; 13
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	5c f4       	brge	.+22     	; 0x1ba6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	3c 81       	ldd	r19, Y+4	; 0x04
    1b94:	2a 30       	cpi	r18, 0x0A	; 10
    1b96:	31 05       	cpc	r19, r1
    1b98:	b1 f1       	breq	.+108    	; 0x1c06 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	8b 30       	cpi	r24, 0x0B	; 11
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	a4 f5       	brge	.+104    	; 0x1c0c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1ba4:	2d c0       	rjmp	.+90     	; 0x1c00 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	2e 30       	cpi	r18, 0x0E	; 14
    1bac:	31 05       	cpc	r19, r1
    1bae:	b9 f1       	breq	.+110    	; 0x1c1e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	8e 30       	cpi	r24, 0x0E	; 14
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	7c f1       	brlt	.+94     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1bba:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbe:	2f 30       	cpi	r18, 0x0F	; 15
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	79 f1       	breq	.+94     	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	80 31       	cpi	r24, 0x10	; 16
    1bca:	91 05       	cpc	r25, r1
    1bcc:	69 f1       	breq	.+90     	; 0x1c28 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bce:	2f c0       	rjmp	.+94     	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bd0:	87 e0       	ldi	r24, 0x07	; 7
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	2e c0       	rjmp	.+92     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1bd6:	88 e0       	ldi	r24, 0x08	; 8
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	2b c0       	rjmp	.+86     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1bdc:	89 e0       	ldi	r24, 0x09	; 9
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	28 c0       	rjmp	.+80     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1be2:	85 e2       	ldi	r24, 0x25	; 37
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	25 c0       	rjmp	.+74     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	22 c0       	rjmp	.+68     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1bee:	85 e0       	ldi	r24, 0x05	; 5
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	1f c0       	rjmp	.+62     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1bf4:	86 e0       	ldi	r24, 0x06	; 6
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	1c c0       	rjmp	.+56     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1bfa:	8a e2       	ldi	r24, 0x2A	; 42
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	19 c0       	rjmp	.+50     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	16 c0       	rjmp	.+44     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	13 c0       	rjmp	.+38     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	10 c0       	rjmp	.+32     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c12:	8d e2       	ldi	r24, 0x2D	; 45
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	0a c0       	rjmp	.+20     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1c1e:	19 82       	std	Y+1, r1	; 0x01
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c22:	8d e3       	ldi	r24, 0x3D	; 61
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	05 c0       	rjmp	.+10     	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c28:	8b e2       	ldi	r24, 0x2B	; 43
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 ea       	ldi	r26, 0xA0	; 160
    1c84:	b1 e4       	ldi	r27, 0x41	; 65
    1c86:	8b 87       	std	Y+11, r24	; 0x0b
    1c88:	9c 87       	std	Y+12, r25	; 0x0c
    1c8a:	ad 87       	std	Y+13, r26	; 0x0d
    1c8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8f 83       	std	Y+7, r24	; 0x07
    1ca8:	98 87       	std	Y+8, r25	; 0x08
    1caa:	a9 87       	std	Y+9, r26	; 0x09
    1cac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_init+0x8e>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_init+0x10c>
	else if (__tmp > 65535)
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_init+0xee>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_init+0xdc>
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_init+0xd0>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_init+0x118>
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	6f ef       	ldi	r22, 0xFF	; 255
    1d66:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d6a:	88 e3       	ldi	r24, 0x38	; 56
    1d6c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d70:	8c e0       	ldi	r24, 0x0C	; 12
    1d72:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_sendCommand>
}
    1d7c:	2e 96       	adiw	r28, 0x0e	; 14
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	e9 97       	sbiw	r28, 0x39	; 57
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e8       	ldi	r26, 0x80	; 128
    1db4:	bf e3       	ldi	r27, 0x3F	; 63
    1db6:	8d ab       	std	Y+53, r24	; 0x35
    1db8:	9e ab       	std	Y+54, r25	; 0x36
    1dba:	af ab       	std	Y+55, r26	; 0x37
    1dbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc0:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a ef       	ldi	r20, 0xFA	; 250
    1dcc:	54 e4       	ldi	r21, 0x44	; 68
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	89 ab       	std	Y+49, r24	; 0x31
    1dd8:	9a ab       	std	Y+50, r25	; 0x32
    1dda:	ab ab       	std	Y+51, r26	; 0x33
    1ddc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dde:	69 a9       	ldd	r22, Y+49	; 0x31
    1de0:	7a a9       	ldd	r23, Y+50	; 0x32
    1de2:	8b a9       	ldd	r24, Y+51	; 0x33
    1de4:	9c a9       	ldd	r25, Y+52	; 0x34
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <LCD_sendCommand+0x72>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	98 ab       	std	Y+48, r25	; 0x30
    1dfc:	8f a7       	std	Y+47, r24	; 0x2f
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e00:	69 a9       	ldd	r22, Y+49	; 0x31
    1e02:	7a a9       	ldd	r23, Y+50	; 0x32
    1e04:	8b a9       	ldd	r24, Y+51	; 0x33
    1e06:	9c a9       	ldd	r25, Y+52	; 0x34
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	98 ab       	std	Y+48, r25	; 0x30
    1e3e:	8f a7       	std	Y+47, r24	; 0x2f
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <LCD_sendCommand+0xd2>
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9e a7       	std	Y+46, r25	; 0x2e
    1e48:	8d a7       	std	Y+45, r24	; 0x2d
    1e4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_sendCommand+0xc0>
    1e52:	9e a7       	std	Y+46, r25	; 0x2e
    1e54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e58:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	98 ab       	std	Y+48, r25	; 0x30
    1e5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e62:	98 a9       	ldd	r25, Y+48	; 0x30
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <LCD_sendCommand+0xb4>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e70:	9c a9       	ldd	r25, Y+52	; 0x34
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	98 ab       	std	Y+48, r25	; 0x30
    1e7c:	8f a7       	std	Y+47, r24	; 0x2f
    1e7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e80:	98 a9       	ldd	r25, Y+48	; 0x30
    1e82:	9c a7       	std	Y+44, r25	; 0x2c
    1e84:	8b a7       	std	Y+43, r24	; 0x2b
    1e86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_sendCommand+0xfc>
    1e8e:	9c a7       	std	Y+44, r25	; 0x2c
    1e90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e8       	ldi	r26, 0x80	; 128
    1ea2:	bf e3       	ldi	r27, 0x3F	; 63
    1ea4:	8f a3       	std	Y+39, r24	; 0x27
    1ea6:	98 a7       	std	Y+40, r25	; 0x28
    1ea8:	a9 a7       	std	Y+41, r26	; 0x29
    1eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	6f a1       	ldd	r22, Y+39	; 0x27
    1eae:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a ef       	ldi	r20, 0xFA	; 250
    1eba:	54 e4       	ldi	r21, 0x44	; 68
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8b a3       	std	Y+35, r24	; 0x23
    1ec6:	9c a3       	std	Y+36, r25	; 0x24
    1ec8:	ad a3       	std	Y+37, r26	; 0x25
    1eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ece:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <LCD_sendCommand+0x160>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a a3       	std	Y+34, r25	; 0x22
    1eea:	89 a3       	std	Y+33, r24	; 0x21
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1eee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	6f a1       	ldd	r22, Y+39	; 0x27
    1f08:	78 a5       	ldd	r23, Y+40	; 0x28
    1f0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9a a3       	std	Y+34, r25	; 0x22
    1f2c:	89 a3       	std	Y+33, r24	; 0x21
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_sendCommand+0x1c0>
    1f30:	88 ec       	ldi	r24, 0xC8	; 200
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	98 a3       	std	Y+32, r25	; 0x20
    1f36:	8f 8f       	std	Y+31, r24	; 0x1f
    1f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_sendCommand+0x1ae>
    1f40:	98 a3       	std	Y+32, r25	; 0x20
    1f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9a a3       	std	Y+34, r25	; 0x22
    1f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f50:	9a a1       	ldd	r25, Y+34	; 0x22
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <LCD_sendCommand+0x1a2>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9a a3       	std	Y+34, r25	; 0x22
    1f6a:	89 a3       	std	Y+33, r24	; 0x21
    1f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f70:	9e 8f       	std	Y+30, r25	; 0x1e
    1f72:	8d 8f       	std	Y+29, r24	; 0x1d
    1f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_sendCommand+0x1ea>
    1f7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	69 ad       	ldd	r22, Y+57	; 0x39
    1f84:	0e 94 a0 0c 	call	0x1940	; 0x1940 <GPIO_writePort>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a0 e8       	ldi	r26, 0x80	; 128
    1f8e:	bf e3       	ldi	r27, 0x3F	; 63
    1f90:	89 8f       	std	Y+25, r24	; 0x19
    1f92:	9a 8f       	std	Y+26, r25	; 0x1a
    1f94:	ab 8f       	std	Y+27, r26	; 0x1b
    1f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	69 8d       	ldd	r22, Y+25	; 0x19
    1f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a ef       	ldi	r20, 0xFA	; 250
    1fa6:	54 e4       	ldi	r21, 0x44	; 68
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8d 8b       	std	Y+21, r24	; 0x15
    1fb2:	9e 8b       	std	Y+22, r25	; 0x16
    1fb4:	af 8b       	std	Y+23, r26	; 0x17
    1fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fba:	7e 89       	ldd	r23, Y+22	; 0x16
    1fbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <LCD_sendCommand+0x24c>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9c 8b       	std	Y+20, r25	; 0x14
    1fd6:	8b 8b       	std	Y+19, r24	; 0x13
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1fda:	6d 89       	ldd	r22, Y+21	; 0x15
    1fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fde:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	4c f5       	brge	.+82     	; 0x2044 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	0f c0       	rjmp	.+30     	; 0x203a <LCD_sendCommand+0x2ac>
    201c:	88 ec       	ldi	r24, 0xC8	; 200
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9a 8b       	std	Y+18, r25	; 0x12
    2022:	89 8b       	std	Y+17, r24	; 0x11
    2024:	89 89       	ldd	r24, Y+17	; 0x11
    2026:	9a 89       	ldd	r25, Y+18	; 0x12
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_sendCommand+0x29a>
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	69 f7       	brne	.-38     	; 0x201c <LCD_sendCommand+0x28e>
    2042:	14 c0       	rjmp	.+40     	; 0x206c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	8b 89       	ldd	r24, Y+19	; 0x13
    205a:	9c 89       	ldd	r25, Y+20	; 0x14
    205c:	98 8b       	std	Y+16, r25	; 0x10
    205e:	8f 87       	std	Y+15, r24	; 0x0f
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	98 89       	ldd	r25, Y+16	; 0x10
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_sendCommand+0x2d6>
    2068:	98 8b       	std	Y+16, r25	; 0x10
    206a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	62 e0       	ldi	r22, 0x02	; 2
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e8       	ldi	r26, 0x80	; 128
    207c:	bf e3       	ldi	r27, 0x3F	; 63
    207e:	8b 87       	std	Y+11, r24	; 0x0b
    2080:	9c 87       	std	Y+12, r25	; 0x0c
    2082:	ad 87       	std	Y+13, r26	; 0x0d
    2084:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	6b 85       	ldd	r22, Y+11	; 0x0b
    2088:	7c 85       	ldd	r23, Y+12	; 0x0c
    208a:	8d 85       	ldd	r24, Y+13	; 0x0d
    208c:	9e 85       	ldd	r25, Y+14	; 0x0e
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a ef       	ldi	r20, 0xFA	; 250
    2094:	54 e4       	ldi	r21, 0x44	; 68
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8f 83       	std	Y+7, r24	; 0x07
    20a0:	98 87       	std	Y+8, r25	; 0x08
    20a2:	a9 87       	std	Y+9, r26	; 0x09
    20a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	3f c0       	rjmp	.+126    	; 0x2146 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    20c8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ca:	78 85       	ldd	r23, Y+8	; 0x08
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	4c f5       	brge	.+82     	; 0x2132 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <LCD_sendCommand+0x39a>
    210a:	88 ec       	ldi	r24, 0xC8	; 200
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9c 83       	std	Y+4, r25	; 0x04
    2110:	8b 83       	std	Y+3, r24	; 0x03
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_sendCommand+0x388>
    211a:	9c 83       	std	Y+4, r25	; 0x04
    211c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	69 f7       	brne	.-38     	; 0x210a <LCD_sendCommand+0x37c>
    2130:	14 c0       	rjmp	.+40     	; 0x215a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <LCD_sendCommand+0x3c4>
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    215a:	e9 96       	adiw	r28, 0x39	; 57
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	e9 97       	sbiw	r28, 0x39	; 57
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	8d ab       	std	Y+53, r24	; 0x35
    2196:	9e ab       	std	Y+54, r25	; 0x36
    2198:	af ab       	std	Y+55, r26	; 0x37
    219a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6d a9       	ldd	r22, Y+53	; 0x35
    219e:	7e a9       	ldd	r23, Y+54	; 0x36
    21a0:	8f a9       	ldd	r24, Y+55	; 0x37
    21a2:	98 ad       	ldd	r25, Y+56	; 0x38
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	89 ab       	std	Y+49, r24	; 0x31
    21b6:	9a ab       	std	Y+50, r25	; 0x32
    21b8:	ab ab       	std	Y+51, r26	; 0x33
    21ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21bc:	69 a9       	ldd	r22, Y+49	; 0x31
    21be:	7a a9       	ldd	r23, Y+50	; 0x32
    21c0:	8b a9       	ldd	r24, Y+51	; 0x33
    21c2:	9c a9       	ldd	r25, Y+52	; 0x34
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_displayCharacter+0x72>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	98 ab       	std	Y+48, r25	; 0x30
    21da:	8f a7       	std	Y+47, r24	; 0x2f
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    21de:	69 a9       	ldd	r22, Y+49	; 0x31
    21e0:	7a a9       	ldd	r23, Y+50	; 0x32
    21e2:	8b a9       	ldd	r24, Y+51	; 0x33
    21e4:	9c a9       	ldd	r25, Y+52	; 0x34
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6d a9       	ldd	r22, Y+53	; 0x35
    21f8:	7e a9       	ldd	r23, Y+54	; 0x36
    21fa:	8f a9       	ldd	r24, Y+55	; 0x37
    21fc:	98 ad       	ldd	r25, Y+56	; 0x38
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	98 ab       	std	Y+48, r25	; 0x30
    221c:	8f a7       	std	Y+47, r24	; 0x2f
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_displayCharacter+0xd2>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9e a7       	std	Y+46, r25	; 0x2e
    2226:	8d a7       	std	Y+45, r24	; 0x2d
    2228:	8d a5       	ldd	r24, Y+45	; 0x2d
    222a:	9e a5       	ldd	r25, Y+46	; 0x2e
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_displayCharacter+0xc0>
    2230:	9e a7       	std	Y+46, r25	; 0x2e
    2232:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	98 ab       	std	Y+48, r25	; 0x30
    223c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2240:	98 a9       	ldd	r25, Y+48	; 0x30
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_displayCharacter+0xb4>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	69 a9       	ldd	r22, Y+49	; 0x31
    224a:	7a a9       	ldd	r23, Y+50	; 0x32
    224c:	8b a9       	ldd	r24, Y+51	; 0x33
    224e:	9c a9       	ldd	r25, Y+52	; 0x34
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	98 ab       	std	Y+48, r25	; 0x30
    225a:	8f a7       	std	Y+47, r24	; 0x2f
    225c:	8f a5       	ldd	r24, Y+47	; 0x2f
    225e:	98 a9       	ldd	r25, Y+48	; 0x30
    2260:	9c a7       	std	Y+44, r25	; 0x2c
    2262:	8b a7       	std	Y+43, r24	; 0x2b
    2264:	8b a5       	ldd	r24, Y+43	; 0x2b
    2266:	9c a5       	ldd	r25, Y+44	; 0x2c
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_displayCharacter+0xfc>
    226c:	9c a7       	std	Y+44, r25	; 0x2c
    226e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	62 e0       	ldi	r22, 0x02	; 2
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e8       	ldi	r26, 0x80	; 128
    2280:	bf e3       	ldi	r27, 0x3F	; 63
    2282:	8f a3       	std	Y+39, r24	; 0x27
    2284:	98 a7       	std	Y+40, r25	; 0x28
    2286:	a9 a7       	std	Y+41, r26	; 0x29
    2288:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	6f a1       	ldd	r22, Y+39	; 0x27
    228c:	78 a5       	ldd	r23, Y+40	; 0x28
    228e:	89 a5       	ldd	r24, Y+41	; 0x29
    2290:	9a a5       	ldd	r25, Y+42	; 0x2a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a ef       	ldi	r20, 0xFA	; 250
    2298:	54 e4       	ldi	r21, 0x44	; 68
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8b a3       	std	Y+35, r24	; 0x23
    22a4:	9c a3       	std	Y+36, r25	; 0x24
    22a6:	ad a3       	std	Y+37, r26	; 0x25
    22a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22aa:	6b a1       	ldd	r22, Y+35	; 0x23
    22ac:	7c a1       	ldd	r23, Y+36	; 0x24
    22ae:	8d a1       	ldd	r24, Y+37	; 0x25
    22b0:	9e a1       	ldd	r25, Y+38	; 0x26
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	2c f4       	brge	.+10     	; 0x22cc <LCD_displayCharacter+0x160>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9a a3       	std	Y+34, r25	; 0x22
    22c8:	89 a3       	std	Y+33, r24	; 0x21
    22ca:	3f c0       	rjmp	.+126    	; 0x234a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    22cc:	6b a1       	ldd	r22, Y+35	; 0x23
    22ce:	7c a1       	ldd	r23, Y+36	; 0x24
    22d0:	8d a1       	ldd	r24, Y+37	; 0x25
    22d2:	9e a1       	ldd	r25, Y+38	; 0x26
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	57 e4       	ldi	r21, 0x47	; 71
    22dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	4c f5       	brge	.+82     	; 0x2336 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e4:	6f a1       	ldd	r22, Y+39	; 0x27
    22e6:	78 a5       	ldd	r23, Y+40	; 0x28
    22e8:	89 a5       	ldd	r24, Y+41	; 0x29
    22ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e2       	ldi	r20, 0x20	; 32
    22f2:	51 e4       	ldi	r21, 0x41	; 65
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9a a3       	std	Y+34, r25	; 0x22
    230a:	89 a3       	std	Y+33, r24	; 0x21
    230c:	0f c0       	rjmp	.+30     	; 0x232c <LCD_displayCharacter+0x1c0>
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	98 a3       	std	Y+32, r25	; 0x20
    2314:	8f 8f       	std	Y+31, r24	; 0x1f
    2316:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2318:	98 a1       	ldd	r25, Y+32	; 0x20
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_displayCharacter+0x1ae>
    231e:	98 a3       	std	Y+32, r25	; 0x20
    2320:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2322:	89 a1       	ldd	r24, Y+33	; 0x21
    2324:	9a a1       	ldd	r25, Y+34	; 0x22
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	9a a3       	std	Y+34, r25	; 0x22
    232a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232c:	89 a1       	ldd	r24, Y+33	; 0x21
    232e:	9a a1       	ldd	r25, Y+34	; 0x22
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	69 f7       	brne	.-38     	; 0x230e <LCD_displayCharacter+0x1a2>
    2334:	14 c0       	rjmp	.+40     	; 0x235e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9a a3       	std	Y+34, r25	; 0x22
    2348:	89 a3       	std	Y+33, r24	; 0x21
    234a:	89 a1       	ldd	r24, Y+33	; 0x21
    234c:	9a a1       	ldd	r25, Y+34	; 0x22
    234e:	9e 8f       	std	Y+30, r25	; 0x1e
    2350:	8d 8f       	std	Y+29, r24	; 0x1d
    2352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2354:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_displayCharacter+0x1ea>
    235a:	9e 8f       	std	Y+30, r25	; 0x1e
    235c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	69 ad       	ldd	r22, Y+57	; 0x39
    2362:	0e 94 a0 0c 	call	0x1940	; 0x1940 <GPIO_writePort>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a0 e8       	ldi	r26, 0x80	; 128
    236c:	bf e3       	ldi	r27, 0x3F	; 63
    236e:	89 8f       	std	Y+25, r24	; 0x19
    2370:	9a 8f       	std	Y+26, r25	; 0x1a
    2372:	ab 8f       	std	Y+27, r26	; 0x1b
    2374:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2376:	69 8d       	ldd	r22, Y+25	; 0x19
    2378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a ef       	ldi	r20, 0xFA	; 250
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8d 8b       	std	Y+21, r24	; 0x15
    2390:	9e 8b       	std	Y+22, r25	; 0x16
    2392:	af 8b       	std	Y+23, r26	; 0x17
    2394:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2396:	6d 89       	ldd	r22, Y+21	; 0x15
    2398:	7e 89       	ldd	r23, Y+22	; 0x16
    239a:	8f 89       	ldd	r24, Y+23	; 0x17
    239c:	98 8d       	ldd	r25, Y+24	; 0x18
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	5f e3       	ldi	r21, 0x3F	; 63
    23a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	2c f4       	brge	.+10     	; 0x23b8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
    23b6:	3f c0       	rjmp	.+126    	; 0x2436 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    23b8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ba:	7e 89       	ldd	r23, Y+22	; 0x16
    23bc:	8f 89       	ldd	r24, Y+23	; 0x17
    23be:	98 8d       	ldd	r25, Y+24	; 0x18
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	3f ef       	ldi	r19, 0xFF	; 255
    23c4:	4f e7       	ldi	r20, 0x7F	; 127
    23c6:	57 e4       	ldi	r21, 0x47	; 71
    23c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	4c f5       	brge	.+82     	; 0x2422 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	69 8d       	ldd	r22, Y+25	; 0x19
    23d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9c 8b       	std	Y+20, r25	; 0x14
    23f6:	8b 8b       	std	Y+19, r24	; 0x13
    23f8:	0f c0       	rjmp	.+30     	; 0x2418 <LCD_displayCharacter+0x2ac>
    23fa:	88 ec       	ldi	r24, 0xC8	; 200
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9a 8b       	std	Y+18, r25	; 0x12
    2400:	89 8b       	std	Y+17, r24	; 0x11
    2402:	89 89       	ldd	r24, Y+17	; 0x11
    2404:	9a 89       	ldd	r25, Y+18	; 0x12
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_displayCharacter+0x29a>
    240a:	9a 8b       	std	Y+18, r25	; 0x12
    240c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	8b 89       	ldd	r24, Y+19	; 0x13
    2410:	9c 89       	ldd	r25, Y+20	; 0x14
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	9c 8b       	std	Y+20, r25	; 0x14
    2416:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	8b 89       	ldd	r24, Y+19	; 0x13
    241a:	9c 89       	ldd	r25, Y+20	; 0x14
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	69 f7       	brne	.-38     	; 0x23fa <LCD_displayCharacter+0x28e>
    2420:	14 c0       	rjmp	.+40     	; 0x244a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2422:	6d 89       	ldd	r22, Y+21	; 0x15
    2424:	7e 89       	ldd	r23, Y+22	; 0x16
    2426:	8f 89       	ldd	r24, Y+23	; 0x17
    2428:	98 8d       	ldd	r25, Y+24	; 0x18
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9c 8b       	std	Y+20, r25	; 0x14
    2434:	8b 8b       	std	Y+19, r24	; 0x13
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	98 8b       	std	Y+16, r25	; 0x10
    243c:	8f 87       	std	Y+15, r24	; 0x0f
    243e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2440:	98 89       	ldd	r25, Y+16	; 0x10
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LCD_displayCharacter+0x2d6>
    2446:	98 8b       	std	Y+16, r25	; 0x10
    2448:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	62 e0       	ldi	r22, 0x02	; 2
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_writePin>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e8       	ldi	r26, 0x80	; 128
    245a:	bf e3       	ldi	r27, 0x3F	; 63
    245c:	8b 87       	std	Y+11, r24	; 0x0b
    245e:	9c 87       	std	Y+12, r25	; 0x0c
    2460:	ad 87       	std	Y+13, r26	; 0x0d
    2462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	6b 85       	ldd	r22, Y+11	; 0x0b
    2466:	7c 85       	ldd	r23, Y+12	; 0x0c
    2468:	8d 85       	ldd	r24, Y+13	; 0x0d
    246a:	9e 85       	ldd	r25, Y+14	; 0x0e
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a ef       	ldi	r20, 0xFA	; 250
    2472:	54 e4       	ldi	r21, 0x44	; 68
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8f 83       	std	Y+7, r24	; 0x07
    247e:	98 87       	std	Y+8, r25	; 0x08
    2480:	a9 87       	std	Y+9, r26	; 0x09
    2482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <LCD_displayCharacter+0x39a>
    24e8:	88 ec       	ldi	r24, 0xC8	; 200
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_displayCharacter+0x388>
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <LCD_displayCharacter+0x37c>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_displayCharacter+0x3c4>
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2538:	e9 96       	adiw	r28, 0x39	; 57
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <LCD_displayString+0x6>
    2550:	0f 92       	push	r0
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	9b 83       	std	Y+3, r25	; 0x03
    2558:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    255a:	19 82       	std	Y+1, r1	; 0x01
    255c:	0e c0       	rjmp	.+28     	; 0x257a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	80 81       	ld	r24, Z
    2570:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_displayCharacter>
		i++;
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	9b 81       	ldd	r25, Y+3	; 0x03
    2584:	fc 01       	movw	r30, r24
    2586:	e2 0f       	add	r30, r18
    2588:	f3 1f       	adc	r31, r19
    258a:	80 81       	ld	r24, Z
    258c:	88 23       	and	r24, r24
    258e:	39 f7       	brne	.-50     	; 0x255e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <LCD_moveCursor+0x6>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <LCD_moveCursor+0x8>
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	8a 83       	std	Y+2, r24	; 0x02
    25ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	3d 83       	std	Y+5, r19	; 0x05
    25b6:	2c 83       	std	Y+4, r18	; 0x04
    25b8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ba:	9d 81       	ldd	r25, Y+5	; 0x05
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	91 05       	cpc	r25, r1
    25c0:	c1 f0       	breq	.+48     	; 0x25f2 <LCD_moveCursor+0x56>
    25c2:	2c 81       	ldd	r18, Y+4	; 0x04
    25c4:	3d 81       	ldd	r19, Y+5	; 0x05
    25c6:	22 30       	cpi	r18, 0x02	; 2
    25c8:	31 05       	cpc	r19, r1
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_moveCursor+0x3a>
    25cc:	8c 81       	ldd	r24, Y+4	; 0x04
    25ce:	9d 81       	ldd	r25, Y+5	; 0x05
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	61 f0       	breq	.+24     	; 0x25ec <LCD_moveCursor+0x50>
    25d4:	19 c0       	rjmp	.+50     	; 0x2608 <LCD_moveCursor+0x6c>
    25d6:	2c 81       	ldd	r18, Y+4	; 0x04
    25d8:	3d 81       	ldd	r19, Y+5	; 0x05
    25da:	22 30       	cpi	r18, 0x02	; 2
    25dc:	31 05       	cpc	r19, r1
    25de:	69 f0       	breq	.+26     	; 0x25fa <LCD_moveCursor+0x5e>
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	9d 81       	ldd	r25, Y+5	; 0x05
    25e4:	83 30       	cpi	r24, 0x03	; 3
    25e6:	91 05       	cpc	r25, r1
    25e8:	61 f0       	breq	.+24     	; 0x2602 <LCD_moveCursor+0x66>
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	0b c0       	rjmp	.+22     	; 0x2608 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	80 5c       	subi	r24, 0xC0	; 192
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	07 c0       	rjmp	.+14     	; 0x2608 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	80 5f       	subi	r24, 0xF0	; 240
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	80 5b       	subi	r24, 0xB0	; 176
    2606:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	80 68       	ori	r24, 0x80	; 128
    260c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_sendCommand>
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <LCD_displayStringRowColumn+0x6>
    2626:	00 d0       	rcall	.+0      	; 0x2628 <LCD_displayStringRowColumn+0x8>
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	6a 83       	std	Y+2, r22	; 0x02
    2630:	5c 83       	std	Y+4, r21	; 0x04
    2632:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	6a 81       	ldd	r22, Y+2	; 0x02
    2638:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	62 97       	sbiw	r28, 0x12	; 18
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	9a 8b       	std	Y+18, r25	; 0x12
    2668:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use C function to convert the data to its corresponding ASCII value, 10 for decimal */
    266a:	89 89       	ldd	r24, Y+17	; 0x11
    266c:	9a 89       	ldd	r25, Y+18	; 0x12
    266e:	9e 01       	movw	r18, r28
    2670:	2f 5f       	subi	r18, 0xFF	; 255
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	b9 01       	movw	r22, r18
    2676:	4a e0       	ldi	r20, 0x0A	; 10
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	0e 94 92 18 	call	0x3124	; 0x3124 <itoa>
	LCD_displayString(buff); /* Display the string */
    267e:	ce 01       	movw	r24, r28
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
}
    2686:	62 96       	adiw	r28, 0x12	; 18
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_sendCommand>
}
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <main>:
#include "HMI_MC1.h"

uint8 g_mismatchCount;
uint8 Pass[PASSWORD_SIZE], confimedPass[PASSWORD_SIZE];

int main(void){
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	c2 55       	subi	r28, 0x52	; 82
    26b6:	d0 40       	sbci	r29, 0x00	; 0
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61

	uint8 key = 0;
    26c2:	1b ae       	std	Y+59, r1	; 0x3b

	/* Create configuration structure for UART driver */
	UART_ConfigType uart_ConfigType  = {EIGHT_BITS, EVEN , ONE_BIT ,9600};
    26c4:	ce 01       	movw	r24, r28
    26c6:	cc 96       	adiw	r24, 0x3c	; 60
    26c8:	2b 96       	adiw	r28, 0x0b	; 11
    26ca:	9f af       	std	Y+63, r25	; 0x3f
    26cc:	8e af       	std	Y+62, r24	; 0x3e
    26ce:	2b 97       	sbiw	r28, 0x0b	; 11
    26d0:	e1 e1       	ldi	r30, 0x11	; 17
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	2d 96       	adiw	r28, 0x0d	; 13
    26d6:	ff af       	std	Y+63, r31	; 0x3f
    26d8:	ee af       	std	Y+62, r30	; 0x3e
    26da:	2d 97       	sbiw	r28, 0x0d	; 13
    26dc:	f7 e0       	ldi	r31, 0x07	; 7
    26de:	2e 96       	adiw	r28, 0x0e	; 14
    26e0:	ff af       	std	Y+63, r31	; 0x3f
    26e2:	2e 97       	sbiw	r28, 0x0e	; 14
    26e4:	2d 96       	adiw	r28, 0x0d	; 13
    26e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    26e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ea:	2d 97       	sbiw	r28, 0x0d	; 13
    26ec:	00 80       	ld	r0, Z
    26ee:	2d 96       	adiw	r28, 0x0d	; 13
    26f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    26f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    26f4:	2d 97       	sbiw	r28, 0x0d	; 13
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	2d 96       	adiw	r28, 0x0d	; 13
    26fa:	9f af       	std	Y+63, r25	; 0x3f
    26fc:	8e af       	std	Y+62, r24	; 0x3e
    26fe:	2d 97       	sbiw	r28, 0x0d	; 13
    2700:	2b 96       	adiw	r28, 0x0b	; 11
    2702:	ee ad       	ldd	r30, Y+62	; 0x3e
    2704:	ff ad       	ldd	r31, Y+63	; 0x3f
    2706:	2b 97       	sbiw	r28, 0x0b	; 11
    2708:	00 82       	st	Z, r0
    270a:	2b 96       	adiw	r28, 0x0b	; 11
    270c:	8e ad       	ldd	r24, Y+62	; 0x3e
    270e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2710:	2b 97       	sbiw	r28, 0x0b	; 11
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	2b 96       	adiw	r28, 0x0b	; 11
    2716:	9f af       	std	Y+63, r25	; 0x3f
    2718:	8e af       	std	Y+62, r24	; 0x3e
    271a:	2b 97       	sbiw	r28, 0x0b	; 11
    271c:	2e 96       	adiw	r28, 0x0e	; 14
    271e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2720:	2e 97       	sbiw	r28, 0x0e	; 14
    2722:	91 50       	subi	r25, 0x01	; 1
    2724:	2e 96       	adiw	r28, 0x0e	; 14
    2726:	9f af       	std	Y+63, r25	; 0x3f
    2728:	2e 97       	sbiw	r28, 0x0e	; 14
    272a:	2e 96       	adiw	r28, 0x0e	; 14
    272c:	ef ad       	ldd	r30, Y+63	; 0x3f
    272e:	2e 97       	sbiw	r28, 0x0e	; 14
    2730:	ee 23       	and	r30, r30
    2732:	c1 f6       	brne	.-80     	; 0x26e4 <main+0x38>

	/* Create configuration structure for TIMER driver */
	Timer1_ConfigType timer1_ConfigType ={0 ,8000,PRESCALER_1024,COMPARE_MODE};
    2734:	ce 01       	movw	r24, r28
    2736:	8d 5b       	subi	r24, 0xBD	; 189
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	60 96       	adiw	r28, 0x10	; 16
    273c:	9f af       	std	Y+63, r25	; 0x3f
    273e:	8e af       	std	Y+62, r24	; 0x3e
    2740:	60 97       	sbiw	r28, 0x10	; 16
    2742:	8b e0       	ldi	r24, 0x0B	; 11
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	62 96       	adiw	r28, 0x12	; 18
    2748:	9f af       	std	Y+63, r25	; 0x3f
    274a:	8e af       	std	Y+62, r24	; 0x3e
    274c:	62 97       	sbiw	r28, 0x12	; 18
    274e:	96 e0       	ldi	r25, 0x06	; 6
    2750:	63 96       	adiw	r28, 0x13	; 19
    2752:	9f af       	std	Y+63, r25	; 0x3f
    2754:	63 97       	sbiw	r28, 0x13	; 19
    2756:	62 96       	adiw	r28, 0x12	; 18
    2758:	ee ad       	ldd	r30, Y+62	; 0x3e
    275a:	ff ad       	ldd	r31, Y+63	; 0x3f
    275c:	62 97       	sbiw	r28, 0x12	; 18
    275e:	00 80       	ld	r0, Z
    2760:	62 96       	adiw	r28, 0x12	; 18
    2762:	8e ad       	ldd	r24, Y+62	; 0x3e
    2764:	9f ad       	ldd	r25, Y+63	; 0x3f
    2766:	62 97       	sbiw	r28, 0x12	; 18
    2768:	01 96       	adiw	r24, 0x01	; 1
    276a:	62 96       	adiw	r28, 0x12	; 18
    276c:	9f af       	std	Y+63, r25	; 0x3f
    276e:	8e af       	std	Y+62, r24	; 0x3e
    2770:	62 97       	sbiw	r28, 0x12	; 18
    2772:	60 96       	adiw	r28, 0x10	; 16
    2774:	ee ad       	ldd	r30, Y+62	; 0x3e
    2776:	ff ad       	ldd	r31, Y+63	; 0x3f
    2778:	60 97       	sbiw	r28, 0x10	; 16
    277a:	00 82       	st	Z, r0
    277c:	60 96       	adiw	r28, 0x10	; 16
    277e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2780:	9f ad       	ldd	r25, Y+63	; 0x3f
    2782:	60 97       	sbiw	r28, 0x10	; 16
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	60 96       	adiw	r28, 0x10	; 16
    2788:	9f af       	std	Y+63, r25	; 0x3f
    278a:	8e af       	std	Y+62, r24	; 0x3e
    278c:	60 97       	sbiw	r28, 0x10	; 16
    278e:	63 96       	adiw	r28, 0x13	; 19
    2790:	9f ad       	ldd	r25, Y+63	; 0x3f
    2792:	63 97       	sbiw	r28, 0x13	; 19
    2794:	91 50       	subi	r25, 0x01	; 1
    2796:	63 96       	adiw	r28, 0x13	; 19
    2798:	9f af       	std	Y+63, r25	; 0x3f
    279a:	63 97       	sbiw	r28, 0x13	; 19
    279c:	63 96       	adiw	r28, 0x13	; 19
    279e:	ef ad       	ldd	r30, Y+63	; 0x3f
    27a0:	63 97       	sbiw	r28, 0x13	; 19
    27a2:	ee 23       	and	r30, r30
    27a4:	c1 f6       	brne	.-80     	; 0x2756 <main+0xaa>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    27a6:	af e5       	ldi	r26, 0x5F	; 95
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	ef e5       	ldi	r30, 0x5F	; 95
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	80 68       	ori	r24, 0x80	; 128
    27b2:	8c 93       	st	X, r24

	/* Set the Call back function pointer in the TIMER driver */
	Timer1_setCallBack(MC1_incrementCounter);
    27b4:	83 e5       	ldi	r24, 0x53	; 83
    27b6:	99 e0       	ldi	r25, 0x09	; 9
    27b8:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <Timer1_setCallBack>

	LCD_init();
    27bc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_init>
	Timer1_init(&timer1_ConfigType); /*Initialize the Timer driver*/
    27c0:	ce 01       	movw	r24, r28
    27c2:	8d 5b       	subi	r24, 0xBD	; 189
    27c4:	9f 4f       	sbci	r25, 0xFF	; 255
    27c6:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <Timer1_init>
	UART_init(&uart_ConfigType); /*Initialize the UART driver*/
    27ca:	ce 01       	movw	r24, r28
    27cc:	cc 96       	adiw	r24, 0x3c	; 60
    27ce:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <UART_init>


	MC1_createPassword();
    27d2:	0e 94 f7 06 	call	0xdee	; 0xdee <MC1_createPassword>

	while(1){

		MC1_displayMainmenu(); /*display the main menu +: open door  -: change password */
    27d6:	0e 94 3a 09 	call	0x1274	; 0x1274 <MC1_displayMainmenu>

		key = KEYPAD_getPressedKey();
    27da:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <KEYPAD_getPressedKey>
    27de:	8b af       	std	Y+59, r24	; 0x3b
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	aa ef       	ldi	r26, 0xFA	; 250
    27e6:	b3 e4       	ldi	r27, 0x43	; 67
    27e8:	8d ab       	std	Y+53, r24	; 0x35
    27ea:	9e ab       	std	Y+54, r25	; 0x36
    27ec:	af ab       	std	Y+55, r26	; 0x37
    27ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6d a9       	ldd	r22, Y+53	; 0x35
    27f2:	7e a9       	ldd	r23, Y+54	; 0x36
    27f4:	8f a9       	ldd	r24, Y+55	; 0x37
    27f6:	98 ad       	ldd	r25, Y+56	; 0x38
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	89 ab       	std	Y+49, r24	; 0x31
    280a:	9a ab       	std	Y+50, r25	; 0x32
    280c:	ab ab       	std	Y+51, r26	; 0x33
    280e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2810:	69 a9       	ldd	r22, Y+49	; 0x31
    2812:	7a a9       	ldd	r23, Y+50	; 0x32
    2814:	8b a9       	ldd	r24, Y+51	; 0x33
    2816:	9c a9       	ldd	r25, Y+52	; 0x34
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <main+0x186>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	98 ab       	std	Y+48, r25	; 0x30
    282e:	8f a7       	std	Y+47, r24	; 0x2f
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <main+0x204>
	else if (__tmp > 65535)
    2832:	69 a9       	ldd	r22, Y+49	; 0x31
    2834:	7a a9       	ldd	r23, Y+50	; 0x32
    2836:	8b a9       	ldd	r24, Y+51	; 0x33
    2838:	9c a9       	ldd	r25, Y+52	; 0x34
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6d a9       	ldd	r22, Y+53	; 0x35
    284c:	7e a9       	ldd	r23, Y+54	; 0x36
    284e:	8f a9       	ldd	r24, Y+55	; 0x37
    2850:	98 ad       	ldd	r25, Y+56	; 0x38
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	98 ab       	std	Y+48, r25	; 0x30
    2870:	8f a7       	std	Y+47, r24	; 0x2f
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <main+0x1e6>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9e a7       	std	Y+46, r25	; 0x2e
    287a:	8d a7       	std	Y+45, r24	; 0x2d
    287c:	8d a5       	ldd	r24, Y+45	; 0x2d
    287e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <main+0x1d4>
    2884:	9e a7       	std	Y+46, r25	; 0x2e
    2886:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8f a5       	ldd	r24, Y+47	; 0x2f
    288a:	98 a9       	ldd	r25, Y+48	; 0x30
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	98 ab       	std	Y+48, r25	; 0x30
    2890:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8f a5       	ldd	r24, Y+47	; 0x2f
    2894:	98 a9       	ldd	r25, Y+48	; 0x30
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <main+0x1c8>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	69 a9       	ldd	r22, Y+49	; 0x31
    289e:	7a a9       	ldd	r23, Y+50	; 0x32
    28a0:	8b a9       	ldd	r24, Y+51	; 0x33
    28a2:	9c a9       	ldd	r25, Y+52	; 0x34
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	98 ab       	std	Y+48, r25	; 0x30
    28ae:	8f a7       	std	Y+47, r24	; 0x2f
    28b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b2:	98 a9       	ldd	r25, Y+48	; 0x30
    28b4:	9c a7       	std	Y+44, r25	; 0x2c
    28b6:	8b a7       	std	Y+43, r24	; 0x2b
    28b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <main+0x210>
    28c0:	9c a7       	std	Y+44, r25	; 0x2c
    28c2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);

		if(key == '+'){
    28c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    28c6:	8b 32       	cpi	r24, 0x2B	; 43
    28c8:	09 f0       	breq	.+2      	; 0x28cc <main+0x220>
    28ca:	1e c1       	rjmp	.+572    	; 0x2b08 <main+0x45c>

			UART_sendByte(OPEN_DOOR);  /*send operation to MC2*/
    28cc:	86 e4       	ldi	r24, 0x46	; 70
    28ce:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>

			do{
				MC1_enterPassword(PASSWORD); /*get the password from the user and save it in Pass[PASSWORD_SIZE] defined globally */
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_enterPassword>

				/****SENDING THE 1st PASS TO MC2****/

				UART_sendByte(RECEIVE_PASS); /*check that the MC2 is ready to receive password*/
    28d8:	8a e0       	ldi	r24, 0x0A	; 10
    28da:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>

				while(UART_recieveByte() != SEND_PASS);  /*wait till MC2 is ready to Receive pass if not stay in the loop*/
    28de:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
    28e2:	84 31       	cpi	r24, 0x14	; 20
    28e4:	e1 f7       	brne	.-8      	; 0x28de <main+0x232>

				MC1_sendPassword(Pass); /*Send the 1st password to MC2*/
    28e6:	8e e1       	ldi	r24, 0x1E	; 30
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	0e 94 9f 08 	call	0x113e	; 0x113e <MC1_sendPassword>


				/*wait for the uart in MC2 to transmit the correct action*/
				uint8 receivedByte = UART_recieveByte();
    28ee:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
    28f2:	8a af       	std	Y+58, r24	; 0x3a
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	aa ef       	ldi	r26, 0xFA	; 250
    28fa:	b3 e4       	ldi	r27, 0x43	; 67
    28fc:	8f a3       	std	Y+39, r24	; 0x27
    28fe:	98 a7       	std	Y+40, r25	; 0x28
    2900:	a9 a7       	std	Y+41, r26	; 0x29
    2902:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6f a1       	ldd	r22, Y+39	; 0x27
    2906:	78 a5       	ldd	r23, Y+40	; 0x28
    2908:	89 a5       	ldd	r24, Y+41	; 0x29
    290a:	9a a5       	ldd	r25, Y+42	; 0x2a
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a ef       	ldi	r20, 0xFA	; 250
    2912:	54 e4       	ldi	r21, 0x44	; 68
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8b a3       	std	Y+35, r24	; 0x23
    291e:	9c a3       	std	Y+36, r25	; 0x24
    2920:	ad a3       	std	Y+37, r26	; 0x25
    2922:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2924:	6b a1       	ldd	r22, Y+35	; 0x23
    2926:	7c a1       	ldd	r23, Y+36	; 0x24
    2928:	8d a1       	ldd	r24, Y+37	; 0x25
    292a:	9e a1       	ldd	r25, Y+38	; 0x26
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <main+0x29a>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9a a3       	std	Y+34, r25	; 0x22
    2942:	89 a3       	std	Y+33, r24	; 0x21
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <main+0x318>
	else if (__tmp > 65535)
    2946:	6b a1       	ldd	r22, Y+35	; 0x23
    2948:	7c a1       	ldd	r23, Y+36	; 0x24
    294a:	8d a1       	ldd	r24, Y+37	; 0x25
    294c:	9e a1       	ldd	r25, Y+38	; 0x26
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6f a1       	ldd	r22, Y+39	; 0x27
    2960:	78 a5       	ldd	r23, Y+40	; 0x28
    2962:	89 a5       	ldd	r24, Y+41	; 0x29
    2964:	9a a5       	ldd	r25, Y+42	; 0x2a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9a a3       	std	Y+34, r25	; 0x22
    2984:	89 a3       	std	Y+33, r24	; 0x21
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <main+0x2fa>
    2988:	88 ec       	ldi	r24, 0xC8	; 200
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	98 a3       	std	Y+32, r25	; 0x20
    298e:	8f 8f       	std	Y+31, r24	; 0x1f
    2990:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2992:	98 a1       	ldd	r25, Y+32	; 0x20
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <main+0x2e8>
    2998:	98 a3       	std	Y+32, r25	; 0x20
    299a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	89 a1       	ldd	r24, Y+33	; 0x21
    299e:	9a a1       	ldd	r25, Y+34	; 0x22
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9a a3       	std	Y+34, r25	; 0x22
    29a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	89 a1       	ldd	r24, Y+33	; 0x21
    29a8:	9a a1       	ldd	r25, Y+34	; 0x22
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <main+0x2dc>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6b a1       	ldd	r22, Y+35	; 0x23
    29b2:	7c a1       	ldd	r23, Y+36	; 0x24
    29b4:	8d a1       	ldd	r24, Y+37	; 0x25
    29b6:	9e a1       	ldd	r25, Y+38	; 0x26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9a a3       	std	Y+34, r25	; 0x22
    29c2:	89 a3       	std	Y+33, r24	; 0x21
    29c4:	89 a1       	ldd	r24, Y+33	; 0x21
    29c6:	9a a1       	ldd	r25, Y+34	; 0x22
    29c8:	9e 8f       	std	Y+30, r25	; 0x1e
    29ca:	8d 8f       	std	Y+29, r24	; 0x1d
    29cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <main+0x324>
    29d4:	9e 8f       	std	Y+30, r25	; 0x1e
    29d6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);

				/*if passwords match in MC2 open the door operation*/
				if((receivedByte == DOOR_UNLOCKING)){
    29d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    29da:	82 33       	cpi	r24, 0x32	; 50
    29dc:	29 f4       	brne	.+10     	; 0x29e8 <main+0x33c>
					g_mismatchCount = 0; /*reset the mismatch count*/
    29de:	10 92 28 01 	sts	0x0128, r1
					MC1_displayDoorOperation();
    29e2:	0e 94 8f 09 	call	0x131e	; 0x131e <MC1_displayDoorOperation>
    29e6:	86 c0       	rjmp	.+268    	; 0x2af4 <main+0x448>
					break; /*to exit the do while loop*/
				}
				else if((receivedByte == MISMATCH)){
    29e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    29ea:	88 23       	and	r24, r24
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <main+0x344>
    29ee:	7d c0       	rjmp	.+250    	; 0x2aea <main+0x43e>
					g_mismatchCount++;  /*increment mismatch counter by 1*/
    29f0:	80 91 28 01 	lds	r24, 0x0128
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	80 93 28 01 	sts	0x0128, r24
					LCD_clearScreen();
    29fa:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
					LCD_displayString("WRONG PASS !!");
    29fe:	85 ef       	ldi	r24, 0xF5	; 245
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	aa ef       	ldi	r26, 0xFA	; 250
    2a0c:	b3 e4       	ldi	r27, 0x43	; 67
    2a0e:	89 8f       	std	Y+25, r24	; 0x19
    2a10:	9a 8f       	std	Y+26, r25	; 0x1a
    2a12:	ab 8f       	std	Y+27, r26	; 0x1b
    2a14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	69 8d       	ldd	r22, Y+25	; 0x19
    2a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a ef       	ldi	r20, 0xFA	; 250
    2a24:	54 e4       	ldi	r21, 0x44	; 68
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8d 8b       	std	Y+21, r24	; 0x15
    2a30:	9e 8b       	std	Y+22, r25	; 0x16
    2a32:	af 8b       	std	Y+23, r26	; 0x17
    2a34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a36:	6d 89       	ldd	r22, Y+21	; 0x15
    2a38:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	5f e3       	ldi	r21, 0x3F	; 63
    2a46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	2c f4       	brge	.+10     	; 0x2a58 <main+0x3ac>
		__ticks = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9c 8b       	std	Y+20, r25	; 0x14
    2a54:	8b 8b       	std	Y+19, r24	; 0x13
    2a56:	3f c0       	rjmp	.+126    	; 0x2ad6 <main+0x42a>
	else if (__tmp > 65535)
    2a58:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	3f ef       	ldi	r19, 0xFF	; 255
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	57 e4       	ldi	r21, 0x47	; 71
    2a68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	4c f5       	brge	.+82     	; 0x2ac2 <main+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a70:	69 8d       	ldd	r22, Y+25	; 0x19
    2a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	51 e4       	ldi	r21, 0x41	; 65
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9c 8b       	std	Y+20, r25	; 0x14
    2a96:	8b 8b       	std	Y+19, r24	; 0x13
    2a98:	0f c0       	rjmp	.+30     	; 0x2ab8 <main+0x40c>
    2a9a:	88 ec       	ldi	r24, 0xC8	; 200
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9a 8b       	std	Y+18, r25	; 0x12
    2aa0:	89 8b       	std	Y+17, r24	; 0x11
    2aa2:	89 89       	ldd	r24, Y+17	; 0x11
    2aa4:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <main+0x3fa>
    2aaa:	9a 8b       	std	Y+18, r25	; 0x12
    2aac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9c 8b       	std	Y+20, r25	; 0x14
    2ab6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	9c 89       	ldd	r25, Y+20	; 0x14
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	69 f7       	brne	.-38     	; 0x2a9a <main+0x3ee>
    2ac0:	14 c0       	rjmp	.+40     	; 0x2aea <main+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ada:	98 8b       	std	Y+16, r25	; 0x10
    2adc:	8f 87       	std	Y+15, r24	; 0x0f
    2ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae0:	98 89       	ldd	r25, Y+16	; 0x10
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <main+0x436>
    2ae6:	98 8b       	std	Y+16, r25	; 0x10
    2ae8:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);

				}
			}while(g_mismatchCount < 3);
    2aea:	80 91 28 01 	lds	r24, 0x0128
    2aee:	83 30       	cpi	r24, 0x03	; 3
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <main+0x448>
    2af2:	ef ce       	rjmp	.-546    	; 0x28d2 <main+0x226>

			if(g_mismatchCount == 3){
    2af4:	80 91 28 01 	lds	r24, 0x0128
    2af8:	83 30       	cpi	r24, 0x03	; 3
    2afa:	09 f0       	breq	.+2      	; 0x2afe <main+0x452>
    2afc:	6c ce       	rjmp	.-808    	; 0x27d6 <main+0x12a>
				MC1_warningMessage();  /*to display warning message for 1 min*/
    2afe:	0e 94 6d 09 	call	0x12da	; 0x12da <MC1_warningMessage>
				g_mismatchCount = 0; /*reset the mismatch count*/
    2b02:	10 92 28 01 	sts	0x0128, r1
    2b06:	67 ce       	rjmp	.-818    	; 0x27d6 <main+0x12a>
			}

		}
		else if(key == '-'){
    2b08:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b0a:	8d 32       	cpi	r24, 0x2D	; 45
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <main+0x464>
    2b0e:	63 ce       	rjmp	.-826    	; 0x27d6 <main+0x12a>

			UART_sendByte(CHANGE_PASS);
    2b10:	80 e5       	ldi	r24, 0x50	; 80
    2b12:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>

			do{

				MC1_enterPassword(PASSWORD); /*get the password from the user and save it in Pass[PASSWORD_SIZE] defined globally */
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_enterPassword>

				/****SENDING THE 1st PASS TO MC2****/

				UART_sendByte(RECEIVE_PASS); /*check that the MC2 is ready to receive password*/
    2b1c:	8a e0       	ldi	r24, 0x0A	; 10
    2b1e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>

				while(UART_recieveByte() != SEND_PASS);  /*wait till MC2 is ready to Receive pass if not stay in the loop*/
    2b22:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
    2b26:	84 31       	cpi	r24, 0x14	; 20
    2b28:	e1 f7       	brne	.-8      	; 0x2b22 <main+0x476>

				MC1_sendPassword(Pass); /*Send the 1st password to MC2*/
    2b2a:	8e e1       	ldi	r24, 0x1E	; 30
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	0e 94 9f 08 	call	0x113e	; 0x113e <MC1_sendPassword>


				uint8 receivedByte = UART_recieveByte();
    2b32:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
    2b36:	89 af       	std	Y+57, r24	; 0x39

				if((receivedByte == CHANGE_PASSWORD)){
    2b38:	89 ad       	ldd	r24, Y+57	; 0x39
    2b3a:	8c 33       	cpi	r24, 0x3C	; 60
    2b3c:	29 f4       	brne	.+10     	; 0x2b48 <main+0x49c>
					g_mismatchCount = 0; /*reset the mismatch count*/
    2b3e:	10 92 28 01 	sts	0x0128, r1
					MC1_createPassword();
    2b42:	0e 94 f7 06 	call	0xdee	; 0xdee <MC1_createPassword>
    2b46:	86 c0       	rjmp	.+268    	; 0x2c54 <main+0x5a8>
					break; /*to exit the do while loop*/
				}
				else if((receivedByte == MISMATCH)){
    2b48:	89 ad       	ldd	r24, Y+57	; 0x39
    2b4a:	88 23       	and	r24, r24
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <main+0x4a4>
    2b4e:	7d c0       	rjmp	.+250    	; 0x2c4a <main+0x59e>
					g_mismatchCount++;  /*increment mismatch counter by 1*/
    2b50:	80 91 28 01 	lds	r24, 0x0128
    2b54:	8f 5f       	subi	r24, 0xFF	; 255
    2b56:	80 93 28 01 	sts	0x0128, r24
					LCD_clearScreen();
    2b5a:	0e 94 4c 13 	call	0x2698	; 0x2698 <LCD_clearScreen>
					LCD_displayString("WRONG PASS !!");
    2b5e:	85 ef       	ldi	r24, 0xF5	; 245
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 a5 12 	call	0x254a	; 0x254a <LCD_displayString>
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	aa ef       	ldi	r26, 0xFA	; 250
    2b6c:	b3 e4       	ldi	r27, 0x43	; 67
    2b6e:	8b 87       	std	Y+11, r24	; 0x0b
    2b70:	9c 87       	std	Y+12, r25	; 0x0c
    2b72:	ad 87       	std	Y+13, r26	; 0x0d
    2b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a ef       	ldi	r20, 0xFA	; 250
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	8f 83       	std	Y+7, r24	; 0x07
    2b90:	98 87       	std	Y+8, r25	; 0x08
    2b92:	a9 87       	std	Y+9, r26	; 0x09
    2b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	2c f4       	brge	.+10     	; 0x2bb8 <main+0x50c>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9e 83       	std	Y+6, r25	; 0x06
    2bb4:	8d 83       	std	Y+5, r24	; 0x05
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <main+0x58a>
	else if (__tmp > 65535)
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	4c f5       	brge	.+82     	; 0x2c22 <main+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <main+0x56c>
    2bfa:	88 ec       	ldi	r24, 0xC8	; 200
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9c 83       	std	Y+4, r25	; 0x04
    2c00:	8b 83       	std	Y+3, r24	; 0x03
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <main+0x55a>
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	69 f7       	brne	.-38     	; 0x2bfa <main+0x54e>
    2c20:	14 c0       	rjmp	.+40     	; 0x2c4a <main+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9e 83       	std	Y+6, r25	; 0x06
    2c34:	8d 83       	std	Y+5, r24	; 0x05
    2c36:	8d 81       	ldd	r24, Y+5	; 0x05
    2c38:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3a:	9a 83       	std	Y+2, r25	; 0x02
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <main+0x596>
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}

			}while(g_mismatchCount < 3);
    2c4a:	80 91 28 01 	lds	r24, 0x0128
    2c4e:	83 30       	cpi	r24, 0x03	; 3
    2c50:	08 f4       	brcc	.+2      	; 0x2c54 <main+0x5a8>
    2c52:	61 cf       	rjmp	.-318    	; 0x2b16 <main+0x46a>

			if(g_mismatchCount == 3){
    2c54:	80 91 28 01 	lds	r24, 0x0128
    2c58:	83 30       	cpi	r24, 0x03	; 3
    2c5a:	09 f0       	breq	.+2      	; 0x2c5e <main+0x5b2>
    2c5c:	bc cd       	rjmp	.-1160   	; 0x27d6 <main+0x12a>
				MC1_warningMessage();  /*to display warning message for 1 min*/
    2c5e:	0e 94 6d 09 	call	0x12da	; 0x12da <MC1_warningMessage>
				g_mismatchCount = 0; /*reset the mismatch count*/
    2c62:	10 92 28 01 	sts	0x0128, r1
    2c66:	b7 cd       	rjmp	.-1170   	; 0x27d6 <main+0x12a>

00002c68 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2c68:	1f 92       	push	r1
    2c6a:	0f 92       	push	r0
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	0f 92       	push	r0
    2c70:	11 24       	eor	r1, r1
    2c72:	2f 93       	push	r18
    2c74:	3f 93       	push	r19
    2c76:	4f 93       	push	r20
    2c78:	5f 93       	push	r21
    2c7a:	6f 93       	push	r22
    2c7c:	7f 93       	push	r23
    2c7e:	8f 93       	push	r24
    2c80:	9f 93       	push	r25
    2c82:	af 93       	push	r26
    2c84:	bf 93       	push	r27
    2c86:	ef 93       	push	r30
    2c88:	ff 93       	push	r31
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c92:	80 91 1c 01 	lds	r24, 0x011C
    2c96:	90 91 1d 01 	lds	r25, 0x011D
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	29 f0       	breq	.+10     	; 0x2ca8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2c9e:	e0 91 1c 01 	lds	r30, 0x011C
    2ca2:	f0 91 1d 01 	lds	r31, 0x011D
    2ca6:	09 95       	icall
	}
}
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	ff 91       	pop	r31
    2cae:	ef 91       	pop	r30
    2cb0:	bf 91       	pop	r27
    2cb2:	af 91       	pop	r26
    2cb4:	9f 91       	pop	r25
    2cb6:	8f 91       	pop	r24
    2cb8:	7f 91       	pop	r23
    2cba:	6f 91       	pop	r22
    2cbc:	5f 91       	pop	r21
    2cbe:	4f 91       	pop	r20
    2cc0:	3f 91       	pop	r19
    2cc2:	2f 91       	pop	r18
    2cc4:	0f 90       	pop	r0
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	0f 90       	pop	r0
    2cca:	1f 90       	pop	r1
    2ccc:	18 95       	reti

00002cce <__vector_9>:


ISR(TIMER1_OVF_vect)
{
    2cce:	1f 92       	push	r1
    2cd0:	0f 92       	push	r0
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	0f 92       	push	r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	2f 93       	push	r18
    2cda:	3f 93       	push	r19
    2cdc:	4f 93       	push	r20
    2cde:	5f 93       	push	r21
    2ce0:	6f 93       	push	r22
    2ce2:	7f 93       	push	r23
    2ce4:	8f 93       	push	r24
    2ce6:	9f 93       	push	r25
    2ce8:	af 93       	push	r26
    2cea:	bf 93       	push	r27
    2cec:	ef 93       	push	r30
    2cee:	ff 93       	push	r31
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2cf8:	80 91 1c 01 	lds	r24, 0x011C
    2cfc:	90 91 1d 01 	lds	r25, 0x011D
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	29 f0       	breq	.+10     	; 0x2d0e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2d04:	e0 91 1c 01 	lds	r30, 0x011C
    2d08:	f0 91 1d 01 	lds	r31, 0x011D
    2d0c:	09 95       	icall
	}
}
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	ff 91       	pop	r31
    2d14:	ef 91       	pop	r30
    2d16:	bf 91       	pop	r27
    2d18:	af 91       	pop	r26
    2d1a:	9f 91       	pop	r25
    2d1c:	8f 91       	pop	r24
    2d1e:	7f 91       	pop	r23
    2d20:	6f 91       	pop	r22
    2d22:	5f 91       	pop	r21
    2d24:	4f 91       	pop	r20
    2d26:	3f 91       	pop	r19
    2d28:	2f 91       	pop	r18
    2d2a:	0f 90       	pop	r0
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	0f 90       	pop	r0
    2d30:	1f 90       	pop	r1
    2d32:	18 95       	reti

00002d34 <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Inputs: pointer to the configuration structure with type Timer1_ConfigType.
 * Return: None
 *
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <Timer1_init+0x6>
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr -> initial_value;
    2d42:	ac e4       	ldi	r26, 0x4C	; 76
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e9 81       	ldd	r30, Y+1	; 0x01
    2d48:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	11 96       	adiw	r26, 0x01	; 1
    2d50:	9c 93       	st	X, r25
    2d52:	8e 93       	st	-X, r24

	if((Config_Ptr -> mode) == NORMAL_MODE){
    2d54:	e9 81       	ldd	r30, Y+1	; 0x01
    2d56:	fa 81       	ldd	r31, Y+2	; 0x02
    2d58:	85 81       	ldd	r24, Z+5	; 0x05
    2d5a:	88 23       	and	r24, r24
    2d5c:	91 f4       	brne	.+36     	; 0x2d82 <Timer1_init+0x4e>

		TIMSK |= (1<<TOIE1); /* Enable Timer1 Compare A Interrupt */
    2d5e:	a9 e5       	ldi	r26, 0x59	; 89
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e9 e5       	ldi	r30, 0x59	; 89
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	84 60       	ori	r24, 0x04	; 4
    2d6a:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
    2d6c:	ef e4       	ldi	r30, 0x4F	; 79
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	88 e0       	ldi	r24, 0x08	; 8
    2d72:	80 83       	st	Z, r24
		TCCR1B = (Config_Ptr->prescaler);
    2d74:	ae e4       	ldi	r26, 0x4E	; 78
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d7c:	84 81       	ldd	r24, Z+4	; 0x04
    2d7e:	8c 93       	st	X, r24
    2d80:	20 c0       	rjmp	.+64     	; 0x2dc2 <Timer1_init+0x8e>
	}
	else if((Config_Ptr -> mode) == COMPARE_MODE){
    2d82:	e9 81       	ldd	r30, Y+1	; 0x01
    2d84:	fa 81       	ldd	r31, Y+2	; 0x02
    2d86:	85 81       	ldd	r24, Z+5	; 0x05
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	d9 f4       	brne	.+54     	; 0x2dc2 <Timer1_init+0x8e>

		OCR1A = Config_Ptr-> compare_value;
    2d8c:	aa e4       	ldi	r26, 0x4A	; 74
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e9 81       	ldd	r30, Y+1	; 0x01
    2d92:	fa 81       	ldd	r31, Y+2	; 0x02
    2d94:	82 81       	ldd	r24, Z+2	; 0x02
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	11 96       	adiw	r26, 0x01	; 1
    2d9a:	9c 93       	st	X, r25
    2d9c:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2d9e:	a9 e5       	ldi	r26, 0x59	; 89
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e9 e5       	ldi	r30, 0x59	; 89
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	80 61       	ori	r24, 0x10	; 16
    2daa:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A);
    2dac:	ef e4       	ldi	r30, 0x4F	; 79
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	88 e0       	ldi	r24, 0x08	; 8
    2db2:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (Config_Ptr->prescaler);
    2db4:	ae e4       	ldi	r26, 0x4E	; 78
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dba:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbc:	84 81       	ldd	r24, Z+4	; 0x04
    2dbe:	88 60       	ori	r24, 0x08	; 8
    2dc0:	8c 93       	st	X, r24

	}

}
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <Timer1_setCallBack>:
 * Description: Function to set the Call Back function address.
 * Inputs:  pointer to Call Back function
 * Return: None
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <Timer1_setCallBack+0x6>
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = a_ptr ;
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dde:	90 93 1d 01 	sts	0x011D, r25
    2de2:	80 93 1c 01 	sts	0x011C, r24
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <Timer1_deInit>:
 * Description: Function to disable the Timer1.
 * Inputs: None
 * Return: None
 *
 */
void Timer1_deInit(void){
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
//	CLEAR_BIT(TCCR1B , CS12);
//	CLEAR_BIT(TCCR1B , CS11);
//	CLEAR_BIT(TCCR1B , CS10);

	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2df8:	ef e4       	ldi	r30, 0x4F	; 79
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	10 82       	st	Z, r1
	TCCR1B = 0;
    2dfe:	ee e4       	ldi	r30, 0x4E	; 78
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	10 82       	st	Z, r1
	TCNT1 = 0;
    2e04:	ec e4       	ldi	r30, 0x4C	; 76
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	11 82       	std	Z+1, r1	; 0x01
    2e0a:	10 82       	st	Z, r1

	/*for compare mode*/
	TIMSK &= ~(1<<OCIE1A);
    2e0c:	a9 e5       	ldi	r26, 0x59	; 89
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e9 e5       	ldi	r30, 0x59	; 89
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	8f 7e       	andi	r24, 0xEF	; 239
    2e18:	8c 93       	st	X, r24

	/*for overflow mode*/
	TIMSK &= ~(1<<TOIE1);
    2e1a:	a9 e5       	ldi	r26, 0x59	; 89
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e9 e5       	ldi	r30, 0x59	; 89
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	8b 7f       	andi	r24, 0xFB	; 251
    2e26:	8c 93       	st	X, r24

}
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	00 d0       	rcall	.+0      	; 0x2e34 <UART_init+0x6>
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <UART_init+0x8>
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e3e:	1a 82       	std	Y+2, r1	; 0x02
    2e40:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e42:	eb e2       	ldi	r30, 0x2B	; 43
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	82 e0       	ldi	r24, 0x02	; 2
    2e48:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e4a:	ea e2       	ldi	r30, 0x2A	; 42
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	88 e1       	ldi	r24, 0x18	; 24
    2e50:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr ->bit_data) & 4);
    2e52:	aa e2       	ldi	r26, 0x2A	; 42
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	ea e2       	ldi	r30, 0x2A	; 42
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	98 2f       	mov	r25, r24
    2e5e:	9b 7f       	andi	r25, 0xFB	; 251
    2e60:	eb 81       	ldd	r30, Y+3	; 0x03
    2e62:	fc 81       	ldd	r31, Y+4	; 0x04
    2e64:	80 81       	ld	r24, Z
    2e66:	84 70       	andi	r24, 0x04	; 4
    2e68:	89 2b       	or	r24, r25
    2e6a:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	

	UCSRC = (1<<URSEL);
    2e6c:	e0 e4       	ldi	r30, 0x40	; 64
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 e8       	ldi	r24, 0x80	; 128
    2e72:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr -> bit_data) & 3) << UCSZ0 );
    2e74:	a0 e4       	ldi	r26, 0x40	; 64
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e0 e4       	ldi	r30, 0x40	; 64
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	28 2f       	mov	r18, r24
    2e80:	29 7f       	andi	r18, 0xF9	; 249
    2e82:	eb 81       	ldd	r30, Y+3	; 0x03
    2e84:	fc 81       	ldd	r31, Y+4	; 0x04
    2e86:	80 81       	ld	r24, Z
    2e88:	88 2f       	mov	r24, r24
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	83 70       	andi	r24, 0x03	; 3
    2e8e:	90 70       	andi	r25, 0x00	; 0
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	82 2b       	or	r24, r18
    2e96:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> parity) << UPM0 );
    2e98:	a0 e4       	ldi	r26, 0x40	; 64
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e0 e4       	ldi	r30, 0x40	; 64
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	2f 7c       	andi	r18, 0xCF	; 207
    2ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eaa:	81 81       	ldd	r24, Z+1	; 0x01
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	82 95       	swap	r24
    2eb2:	92 95       	swap	r25
    2eb4:	90 7f       	andi	r25, 0xF0	; 240
    2eb6:	98 27       	eor	r25, r24
    2eb8:	80 7f       	andi	r24, 0xF0	; 240
    2eba:	98 27       	eor	r25, r24
    2ebc:	82 2b       	or	r24, r18
    2ebe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> stop_bit) << USBS );
    2ec0:	a0 e4       	ldi	r26, 0x40	; 64
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e0 e4       	ldi	r30, 0x40	; 64
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	28 2f       	mov	r18, r24
    2ecc:	27 7f       	andi	r18, 0xF7	; 247
    2ece:	eb 81       	ldd	r30, Y+3	; 0x03
    2ed0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	88 0f       	add	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	82 2b       	or	r24, r18
    2ee6:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr ->baud_rate  * 8UL))) - 1);
    2ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eea:	fc 81       	ldd	r31, Y+4	; 0x04
    2eec:	83 81       	ldd	r24, Z+3	; 0x03
    2eee:	94 81       	ldd	r25, Z+4	; 0x04
    2ef0:	a5 81       	ldd	r26, Z+5	; 0x05
    2ef2:	b6 81       	ldd	r27, Z+6	; 0x06
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	aa 1f       	adc	r26, r26
    2efa:	bb 1f       	adc	r27, r27
    2efc:	88 0f       	add	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	aa 1f       	adc	r26, r26
    2f02:	bb 1f       	adc	r27, r27
    2f04:	88 0f       	add	r24, r24
    2f06:	99 1f       	adc	r25, r25
    2f08:	aa 1f       	adc	r26, r26
    2f0a:	bb 1f       	adc	r27, r27
    2f0c:	9c 01       	movw	r18, r24
    2f0e:	ad 01       	movw	r20, r26
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	92 e1       	ldi	r25, 0x12	; 18
    2f14:	aa e7       	ldi	r26, 0x7A	; 122
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	0e 94 39 18 	call	0x3072	; 0x3072 <__udivmodsi4>
    2f20:	da 01       	movw	r26, r20
    2f22:	c9 01       	movw	r24, r18
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f2a:	e0 e4       	ldi	r30, 0x40	; 64
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	9a 81       	ldd	r25, Y+2	; 0x02
    2f32:	89 2f       	mov	r24, r25
    2f34:	99 27       	eor	r25, r25
    2f36:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f38:	e9 e2       	ldi	r30, 0x29	; 41
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	80 83       	st	Z, r24
}
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	0f 92       	push	r0
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f5a:	eb e2       	ldi	r30, 0x2B	; 43
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	80 72       	andi	r24, 0x20	; 32
    2f66:	90 70       	andi	r25, 0x00	; 0
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	b9 f3       	breq	.-18     	; 0x2f5a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f6c:	ec e2       	ldi	r30, 0x2C	; 44
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	80 83       	st	Z, r24

}
    2f74:	0f 90       	pop	r0
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	08 95       	ret

00002f7c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f84:	eb e2       	ldi	r30, 0x2B	; 43
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 23       	and	r24, r24
    2f8c:	dc f7       	brge	.-10     	; 0x2f84 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2f8e:	ec e2       	ldi	r30, 0x2C	; 44
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
}
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <UART_sendString+0x6>
    2fa0:	0f 92       	push	r0
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	9b 83       	std	Y+3, r25	; 0x03
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2faa:	19 82       	std	Y+1, r1	; 0x01
    2fac:	0e c0       	rjmp	.+28     	; 0x2fca <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	28 2f       	mov	r18, r24
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb8:	fc 01       	movw	r30, r24
    2fba:	e2 0f       	add	r30, r18
    2fbc:	f3 1f       	adc	r31, r19
    2fbe:	80 81       	ld	r24, Z
    2fc0:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_sendByte>
		i++;
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	80 81       	ld	r24, Z
    2fdc:	88 23       	and	r24, r24
    2fde:	39 f7       	brne	.-50     	; 0x2fae <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <UART_receiveString+0xa>
    2ff6:	0f 92       	push	r0
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	9b 83       	std	Y+3, r25	; 0x03
    2ffe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3000:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	9b 81       	ldd	r25, Y+3	; 0x03
    300c:	8c 01       	movw	r16, r24
    300e:	02 0f       	add	r16, r18
    3010:	13 1f       	adc	r17, r19
    3012:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
    3016:	f8 01       	movw	r30, r16
    3018:	80 83       	st	Z, r24
    301a:	0f c0       	rjmp	.+30     	; 0x303a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 5f       	subi	r24, 0xFF	; 255
    3020:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	9b 81       	ldd	r25, Y+3	; 0x03
    302c:	8c 01       	movw	r16, r24
    302e:	02 0f       	add	r16, r18
    3030:	13 1f       	adc	r17, r19
    3032:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <UART_recieveByte>
    3036:	f8 01       	movw	r30, r16
    3038:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	8a 81       	ldd	r24, Y+2	; 0x02
    3042:	9b 81       	ldd	r25, Y+3	; 0x03
    3044:	fc 01       	movw	r30, r24
    3046:	e2 0f       	add	r30, r18
    3048:	f3 1f       	adc	r31, r19
    304a:	80 81       	ld	r24, Z
    304c:	83 32       	cpi	r24, 0x23	; 35
    304e:	31 f7       	brne	.-52     	; 0x301c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	fc 01       	movw	r30, r24
    305c:	e2 0f       	add	r30, r18
    305e:	f3 1f       	adc	r31, r19
    3060:	10 82       	st	Z, r1
}
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	08 95       	ret

00003072 <__udivmodsi4>:
    3072:	a1 e2       	ldi	r26, 0x21	; 33
    3074:	1a 2e       	mov	r1, r26
    3076:	aa 1b       	sub	r26, r26
    3078:	bb 1b       	sub	r27, r27
    307a:	fd 01       	movw	r30, r26
    307c:	0d c0       	rjmp	.+26     	; 0x3098 <__udivmodsi4_ep>

0000307e <__udivmodsi4_loop>:
    307e:	aa 1f       	adc	r26, r26
    3080:	bb 1f       	adc	r27, r27
    3082:	ee 1f       	adc	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	a2 17       	cp	r26, r18
    3088:	b3 07       	cpc	r27, r19
    308a:	e4 07       	cpc	r30, r20
    308c:	f5 07       	cpc	r31, r21
    308e:	20 f0       	brcs	.+8      	; 0x3098 <__udivmodsi4_ep>
    3090:	a2 1b       	sub	r26, r18
    3092:	b3 0b       	sbc	r27, r19
    3094:	e4 0b       	sbc	r30, r20
    3096:	f5 0b       	sbc	r31, r21

00003098 <__udivmodsi4_ep>:
    3098:	66 1f       	adc	r22, r22
    309a:	77 1f       	adc	r23, r23
    309c:	88 1f       	adc	r24, r24
    309e:	99 1f       	adc	r25, r25
    30a0:	1a 94       	dec	r1
    30a2:	69 f7       	brne	.-38     	; 0x307e <__udivmodsi4_loop>
    30a4:	60 95       	com	r22
    30a6:	70 95       	com	r23
    30a8:	80 95       	com	r24
    30aa:	90 95       	com	r25
    30ac:	9b 01       	movw	r18, r22
    30ae:	ac 01       	movw	r20, r24
    30b0:	bd 01       	movw	r22, r26
    30b2:	cf 01       	movw	r24, r30
    30b4:	08 95       	ret

000030b6 <__prologue_saves__>:
    30b6:	2f 92       	push	r2
    30b8:	3f 92       	push	r3
    30ba:	4f 92       	push	r4
    30bc:	5f 92       	push	r5
    30be:	6f 92       	push	r6
    30c0:	7f 92       	push	r7
    30c2:	8f 92       	push	r8
    30c4:	9f 92       	push	r9
    30c6:	af 92       	push	r10
    30c8:	bf 92       	push	r11
    30ca:	cf 92       	push	r12
    30cc:	df 92       	push	r13
    30ce:	ef 92       	push	r14
    30d0:	ff 92       	push	r15
    30d2:	0f 93       	push	r16
    30d4:	1f 93       	push	r17
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	ca 1b       	sub	r28, r26
    30e0:	db 0b       	sbc	r29, r27
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	09 94       	ijmp

000030ee <__epilogue_restores__>:
    30ee:	2a 88       	ldd	r2, Y+18	; 0x12
    30f0:	39 88       	ldd	r3, Y+17	; 0x11
    30f2:	48 88       	ldd	r4, Y+16	; 0x10
    30f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    30fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    30fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3100:	b9 84       	ldd	r11, Y+9	; 0x09
    3102:	c8 84       	ldd	r12, Y+8	; 0x08
    3104:	df 80       	ldd	r13, Y+7	; 0x07
    3106:	ee 80       	ldd	r14, Y+6	; 0x06
    3108:	fd 80       	ldd	r15, Y+5	; 0x05
    310a:	0c 81       	ldd	r16, Y+4	; 0x04
    310c:	1b 81       	ldd	r17, Y+3	; 0x03
    310e:	aa 81       	ldd	r26, Y+2	; 0x02
    3110:	b9 81       	ldd	r27, Y+1	; 0x01
    3112:	ce 0f       	add	r28, r30
    3114:	d1 1d       	adc	r29, r1
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	f8 94       	cli
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	ed 01       	movw	r28, r26
    3122:	08 95       	ret

00003124 <itoa>:
    3124:	fb 01       	movw	r30, r22
    3126:	9f 01       	movw	r18, r30
    3128:	e8 94       	clt
    312a:	42 30       	cpi	r20, 0x02	; 2
    312c:	c4 f0       	brlt	.+48     	; 0x315e <itoa+0x3a>
    312e:	45 32       	cpi	r20, 0x25	; 37
    3130:	b4 f4       	brge	.+44     	; 0x315e <itoa+0x3a>
    3132:	4a 30       	cpi	r20, 0x0A	; 10
    3134:	29 f4       	brne	.+10     	; 0x3140 <itoa+0x1c>
    3136:	97 fb       	bst	r25, 7
    3138:	1e f4       	brtc	.+6      	; 0x3140 <itoa+0x1c>
    313a:	90 95       	com	r25
    313c:	81 95       	neg	r24
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	64 2f       	mov	r22, r20
    3142:	77 27       	eor	r23, r23
    3144:	0e 94 c3 18 	call	0x3186	; 0x3186 <__udivmodhi4>
    3148:	80 5d       	subi	r24, 0xD0	; 208
    314a:	8a 33       	cpi	r24, 0x3A	; 58
    314c:	0c f0       	brlt	.+2      	; 0x3150 <itoa+0x2c>
    314e:	89 5d       	subi	r24, 0xD9	; 217
    3150:	81 93       	st	Z+, r24
    3152:	cb 01       	movw	r24, r22
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	a1 f7       	brne	.-24     	; 0x3140 <itoa+0x1c>
    3158:	16 f4       	brtc	.+4      	; 0x315e <itoa+0x3a>
    315a:	5d e2       	ldi	r21, 0x2D	; 45
    315c:	51 93       	st	Z+, r21
    315e:	10 82       	st	Z, r1
    3160:	c9 01       	movw	r24, r18
    3162:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <strrev>

00003166 <strrev>:
    3166:	dc 01       	movw	r26, r24
    3168:	fc 01       	movw	r30, r24
    316a:	67 2f       	mov	r22, r23
    316c:	71 91       	ld	r23, Z+
    316e:	77 23       	and	r23, r23
    3170:	e1 f7       	brne	.-8      	; 0x316a <strrev+0x4>
    3172:	32 97       	sbiw	r30, 0x02	; 2
    3174:	04 c0       	rjmp	.+8      	; 0x317e <strrev+0x18>
    3176:	7c 91       	ld	r23, X
    3178:	6d 93       	st	X+, r22
    317a:	70 83       	st	Z, r23
    317c:	62 91       	ld	r22, -Z
    317e:	ae 17       	cp	r26, r30
    3180:	bf 07       	cpc	r27, r31
    3182:	c8 f3       	brcs	.-14     	; 0x3176 <strrev+0x10>
    3184:	08 95       	ret

00003186 <__udivmodhi4>:
    3186:	aa 1b       	sub	r26, r26
    3188:	bb 1b       	sub	r27, r27
    318a:	51 e1       	ldi	r21, 0x11	; 17
    318c:	07 c0       	rjmp	.+14     	; 0x319c <__udivmodhi4_ep>

0000318e <__udivmodhi4_loop>:
    318e:	aa 1f       	adc	r26, r26
    3190:	bb 1f       	adc	r27, r27
    3192:	a6 17       	cp	r26, r22
    3194:	b7 07       	cpc	r27, r23
    3196:	10 f0       	brcs	.+4      	; 0x319c <__udivmodhi4_ep>
    3198:	a6 1b       	sub	r26, r22
    319a:	b7 0b       	sbc	r27, r23

0000319c <__udivmodhi4_ep>:
    319c:	88 1f       	adc	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	5a 95       	dec	r21
    31a2:	a9 f7       	brne	.-22     	; 0x318e <__udivmodhi4_loop>
    31a4:	80 95       	com	r24
    31a6:	90 95       	com	r25
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	08 95       	ret

000031ae <_exit>:
    31ae:	f8 94       	cli

000031b0 <__stop_program>:
    31b0:	ff cf       	rjmp	.-2      	; 0x31b0 <__stop_program>
